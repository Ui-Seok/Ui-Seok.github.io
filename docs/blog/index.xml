<?xml version="1.0" encoding="UTF-8"?>
<rss  xmlns:atom="http://www.w3.org/2005/Atom" 
      xmlns:media="http://search.yahoo.com/mrss/" 
      xmlns:content="http://purl.org/rss/1.0/modules/content/" 
      xmlns:dc="http://purl.org/dc/elements/1.1/" 
      version="2.0">
<channel>
<title>Home</title>
<link>https://ui-seok.github.io/docs/blog/index.html</link>
<atom:link href="https://ui-seok.github.io/docs/blog/index.xml" rel="self" type="application/rss+xml"/>
<description></description>
<generator>quarto-1.3.450</generator>
<lastBuildDate>Sun, 30 Jun 2024 15:00:00 GMT</lastBuildDate>
<item>
  <title>MongoDB Tutorial</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2024-7-1-MongDB-1/index.html</link>
  <description><![CDATA[ 



<section id="용어-정리" class="level2">
<h2 class="anchored" data-anchor-id="용어-정리">용어 정리</h2>
<ul>
<li><p>Total Dataset (= Database Deployments, Databases)</p>
<p>가장 최상위 데이터 베이스</p>
<p>이 데이터 베이스 안에 여러개의 Cluster 를 구성할 수 있음 (여러개의 소 단위 데이터 베이스)</p></li>
<li><p>Cluster (= Database)</p>
<p>테이블들을 관리하는 집단</p>
<p>Ex) sample_mflix 라는 이름의 클러스터가 있고, 여기 안에 comments, movies, users, etc.. 등 다양한 table 들이 존재</p></li>
<li><p>Collections</p>
<p>해당 collection 안에 여러개의 데이터들이 존재</p></li>
<li><p>Cloud MongoDB 와 Local MongoDB 의 차이</p>
<p>Cloud MongoDB 는 Atlas 라는 웹을 통해 온라인 상으로 데이터 베이스가 관리 가능하게끔 되어있고, <code>mongodb+srv://~</code> 라는 형식으로 주소가 발급된다.</p>
<p>Local MongoDB 는 MongoDB Community Edition or MongoDB Enterprise 를 설치하면 Local 저장소에 데이터를 저장할 수 있게 되고, localhost 주소에 27017 포트로 접근이 가능하게 된다.</p></li>
<li><p>GUI 프로그램</p>
<p>Cloud MongoDB 혹은 Local MongoDB 의 주소를 확인하고 <a href="https://www.mongodb.com/try/download/compass">MongoDB Compass</a> 를 설치하고 해당 주소를 입력하면 GUI 로 데이터를 관리 할 수 있다.</p></li>
</ul>
</section>
<section id="간단한-사용-방법" class="level2">
<h2 class="anchored" data-anchor-id="간단한-사용-방법">간단한 사용 방법</h2>
<ul>
<li><p>Python 으로 연결 하는 방법</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">    uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mongodb+srv://seok:</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{password}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">@</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{cluster_name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">~~~"</span></span>
<span id="cb1-2">    client <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MongoClient(uri)</span>
<span id="cb1-3">    db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> client[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sample_mflix"</span>]</span></code></pre></div>
<p><code>uri</code> 를 이용해 사용하고자 하는 MongoDB 의 주소를 받아온다.</p>
<p><code>client</code> 를 만들어 MongoClient 에 위에서 받아온 주소를 입력한다.</p>
<p><code>db</code> 변수를 하나 할당하여 사용하고자 하는 cluster 의 이름을 입력한다. (만약 해당 cluster 가 없다면 알아서 생성하고 데이터를 관리함)</p></li>
<li><p>데이터 삽입</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> input_table(db):</span>
<span id="cb2-2">        doc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb2-3">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Test input"</span>,</span>
<span id="cb2-4">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"address"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"111"</span>,</span>
<span id="cb2-5">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"1"</span>,</span>
<span id="cb2-6">                <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"time"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"2024-04"</span>,</span>
<span id="cb2-7">        }</span>
<span id="cb2-8"></span>
<span id="cb2-9">        db.test.insert_one(doc)</span>
<span id="cb2-10">        <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># db["test"].insert_one(doc) 같은 표현이다</span></span></code></pre></div>
<p>위에서 만든 <code>db</code> 변수를 활용하여 데이터를 넣게 된다.</p>
<p><code>insert_one</code> 이라는 변수를 사용한다.</p></li>
<li><p>데이터 가져오기</p>
<pre class="pyhton"><code>    def get_table(db):
        all_data = list(db.test.find({}, {"_id": False}))
        # all_data = list(db["test"].find({}, {"_id": False}) 같은 표현이다
        print(all_data)
</code></pre>
<p><code>find</code> 라는 함수를 사용하여 DB 에 접근하고 데이터를 불러온다.</p>
<p>위의 예시 코드에서는 각 데이터를 나타내는 고유 값인 <code>_id</code> 를 제외하고 데이터를 가져오도록 설정하였다.</p>
<p>만약 <code>class_name</code> 이라는 데이터 중에서 값이 <code>1</code> 인 값만 들고오고 싶다면 다음과 같이 하면 된다.</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">    filtered_data <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">list</span>(db[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"test"</span>].find({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"class_name"</span>: <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"_id"</span>: <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>}))</span></code></pre></div>
<p>여기서 사용되는 필터링 방법을 condition 설정 이라고 한다.</p></li>
</ul>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://velog.io/@twinsjbu/Python-초기-파일-만들어서-MongoDB에-insert시키기">Python 초기 파일 만들어서 MongoDB에 저장시키기</a></p>
<p><a href="https://homzzang.com/b/py-55">홈짱닷컴</a></p>
<p><a href="https://velog.io/@twinsjbu/Python-MongoDB-데이터-find하기">Python MongoDB 데이터 find하기</a></p>


</section>

 ]]></description>
  <category>DB</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2024-7-1-MongDB-1/index.html</guid>
  <pubDate>Sun, 30 Jun 2024 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/201/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 18</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2024-1-3-MLOps-day18/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>Docker Compose 를 활용하여 Zookeeper, Broker, Schema Registry, Connect 를 생성함</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="review" class="level3">
<h3 class="anchored" data-anchor-id="review">1. Review</h3>
<ul>
<li>Zookeeper : 브로커 서버의 상태 감지를 위해 사용되는 주키퍼 서버</li>
<li>Broker : Source Connector 에서 데이터를 받아 토픽에 저장하고, Sink Connector 로 데이터를 넘겨줄 브로커 서버</li>
<li>Schema Registry : 메시지의 schema 를 저장하기 위한 Schema Registry 서버</li>
<li>Connect : Connector 를 띄우기 위한 Connect 서버</li>
</ul>
</section>
<section id="kafka-system" class="level3">
<h3 class="anchored" data-anchor-id="kafka-system">2. Kafka System</h3>
<section id="zookeeper-broker" class="level4">
<h4 class="anchored" data-anchor-id="zookeeper-broker">2.1 Zookeeper &amp; Broker</h4>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2024-1-3-MLOps-day18/index.html</guid>
  <pubDate>Tue, 02 Jan 2024 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/120/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 17</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>Kafka 의 Connect 와 Connector 에 대해 알아봄</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="producer-consumer-의-한계" class="level3">
<h3 class="anchored" data-anchor-id="producer-consumer-의-한계">1. Producer &amp; Consumer 의 한계</h3>
<p>Kafka 는 이전의 내용(Day16 참고)처럼 Producer 와 Consumer client 를 통해 메시지 파이프라인을 쉽게 구성할 수 있음</p>
<p>하지만 실제 시스템에서는 다름</p>
<p>DB Server 1 로부터 데이터를 가져오는 Producer 가 있고, 데이터를 브로커의 어떤 토픽으로 보낸 뒤, Consumer 가 DB Server 2에 데이터를 전달하는 과정이 있음</p>
<p>하지만 이렇게 전달할 DB 들이 100개, 1000개가 된다면 Producer 와 Consumer 를 100개, 1000개로 만들어야 함</p>
<p>하지만 메시지 파이프라인 구성을 위해 매번 Producer 와 Consumer 를 개발하는 것은 쉽지않음</p>
<p>이러한 문제를 해결하여 더 간편하고 효율적으로 메시지 파이프라인을 구축하는 방법으로 Connect 와 Connector 라는 것이 탄생하게 되었음</p>
</section>
<section id="connect-connector-소개" class="level3">
<h3 class="anchored" data-anchor-id="connect-connector-소개">2. Connect &amp; Connector 소개</h3>
<p>Connect 는 데이터 시스템과 Kafka 간의 데이터를 확장 가능하고, 안전한 방법으로 streaming 하기 위한 도구임</p>
<p>Connect 를 사용하기 위해서는 데이터를 어디로부터 가져오는지, 어디에다가 전달해야 하는지를 알려주는 Connector 를 정의해야 함</p>
<p>여기서 Connector 는 메시지 파이프라인에 대한 추상 객체이며, task 들을 관리함</p>
<p>Connect 와 Connector 의 역할을 살펴보면, Connect 는 프레임워크이고 Connector 는 그 안에서 돌아가는 플러그인임</p>
<p>따라서 Connect 프레임워크를 실행하고 특정 Connector 플러그인을 실행시키면 메시지 파이프라인을 쉽게 구축할 수 있음</p>
<section id="connector-의-종류" class="level4">
<h4 class="anchored" data-anchor-id="connector-의-종류">2.1 Connector 의 종류</h4>
<p><strong>Source Connector</strong></p>
<ul>
<li>Source system 의 데이터를 브로커의 토픽으로 publish 하는 Connector 임</li>
<li>Producer 의 역할을 하는 Connector</li>
</ul>
<p><strong>Sink Connector</strong></p>
<ul>
<li>브로커의 토픽에 있는 데이터를 subscribe 해서 target system 에 전달하는 Connector 임</li>
<li>Consumer 의 역할을 하는 Connector</li>
</ul>
<p>이를 그림으로 나타내면 다음과 같음</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Kafka System wtih Connect &amp; Connector</figcaption>
</figure>
</div>
</section>
</section>
<section id="schema-registry-소개" class="level3">
<h3 class="anchored" data-anchor-id="schema-registry-소개">3. Schema Registry 소개</h3>
<p>Kafka 는 decoupling 이라는 특징을 가지고 있음</p>
<p>Producer 와 Consumer 가 존재하고, 서로 의존적이지 않고 완벽하게 분리되어 있음</p>
<p>또한 브로커는 메시지를 한 번 저장하면 이후에는 수정할 수 없음</p>
<p>이러한 구조적인 특징과 내부 구조로 인해 Kafka 운영에서는 다음과 같은 상황이 발생할 수 있음</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Consume Fail</figcaption>
</figure>
</div>
<ol type="1">
<li>Producer 1과 2는 각자 브로커의 토픽 A 에 메시지를 보냄</li>
<li>Consumer 는 토픽 A 에 있는 메시지를 읽음</li>
<li>이때, Producer 2가 schema 를 변경하여 메시지 (4번)를 발행함</li>
<li>하지만 Consumer 는 이 상황을 알지 못하기 때문에 4번 메시지를 구독하여 처리하는 과정에서 메시지를 읽어들이지 못하고 장애가 발생함</li>
</ol>
<p>위와 같은 상황처럼 결국 구조적인 결합도는 낮췄지만 내부적인 결합도 문제는 여전히 가지고 있게 됨</p>
<p>이러한 문제에 더하여 동일한 schema 의 메시지가 계속 들어오는 경우, 같은 schema 를 계속해서 저장해야하기 때문에 메시지의 크기가 커지며, schema 가 중복이 되어 불필요한 데이터 용량을 차지하게 됨</p>
<p>이러한 구조적인 결합도를 낮추고 불필요한 데이터 용량을 줄이기 위해 Kafka 에서는 Schema Registry 를 사용함</p>
<p>Schema Registry 란 메시지의 Schema 를 저장해주는 일종의 저장소임</p>
<p>다음은 Kafka Connector 가 만들어 내는 메시지 구조임</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/fig3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">메시지 구조</figcaption>
</figure>
</div>
<p>메시지는 key 와 value 로 구성되어 있으며, 각 key 와 value 는 schema 와 payload 로 구성되어 있음</p>
<p>여기서 key 는 PK 와 같이 데이터를 식별할 수 있는 정보가 들어있고, value 는 데이터의 전체 값이 들어있음</p>
<p>payload 는 데이터 값이 저장되며, schema 에는 이 데이터 값의 데이터 타입이 명시되어 있음</p>
<p>다음 그림은 Producer, Schema Registry, Kafka 간의 관계를 나타냄</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/fig4.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Schema Registry Architecture</figcaption>
</figure>
</div>
<p>각 컴포넌트가 작동하는 순서는 다음과 같음</p>
<ol type="1">
<li>Producer 에서 Kafka 의 Serializer (또는 Converter) 에게 메시지를 보냄</li>
<li>Serializer 는 메시지를 받아 메시지의 schema 를 Schema Registry 에 보냄</li>
<li>이어서 schema ID 를 받고, schema ID 와 데이터를 Kafka 에게 보냄</li>
</ol>
<p>-&gt; Connect 와 Connector 를 이용할 때는 Serializer 를 직접 구현할 필요없이 Connect 를 띄울 때 환경 변수로 적어주면 됨</p>
<p>앞서 살펴봤던 schema 중복 문제는 Schema Registry 에 key 와 value 에 명시된 schema 를 따로 저장하기 때문에 Connector 가 schema 대신 Schema Registry 의 schema ID 를 명시하여 해결할 수 있게 됨</p>
<p>Schema ID 를 쓰면 메시지의 크기가 줄어들어 불필요한 데이터의 용량도 줄일 수 있음</p>
<p>또한 내부적인 결합도 문제는 Schema Registry 에서 제공하는 기능 중 하나인 schema 호환성 규칙 강제 기능으로 해결할 수 있음</p>
<p>Schema 호환성 규칙 강제란 schema 를 등록하여 사용할 수 있지만, schema 버전 간의 호환성을 강제함으로써 일종의 규칙을 세우는 것임</p>
<p>Ex) Backward, Forward, Full compatibility</p>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://always-kimkim.tistory.com/entry/kafka101-schema-registry">Kafka 101</a></p>
<p><a href="https://scorpio-mercury.tistory.com/30">Kafka Connect 란?</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-29-MLOps-day17/index.html</guid>
  <pubDate>Thu, 28 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/119/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 16</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-26-MLOps-day16/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>Docker Compose 를 이용하여 주키퍼와 브로커를 생성</p></li>
<li><p>Producer 와 Consumer 를 실행</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="zookeeper-broker-setup" class="level3">
<h3 class="anchored" data-anchor-id="zookeeper-broker-setup">1. Zookeeper &amp; Broker Setup</h3>
<section id="zookeeper-service" class="level4">
<h4 class="anchored" data-anchor-id="zookeeper-service">1.1 Zookeeper Service</h4>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zookeeper</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> confluentinc/cp-zookeeper:7.3.0</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 2181:2181</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ZOOKEEPER_SERVER_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ZOOKEEPER_CLIENT_PORT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2181</span></span></code></pre></div>
<ul>
<li><em>ZOOKEEPER_SERVER_ID</em> : 주키퍼 클러스터에서 해당 주키퍼를 식별할 ID</li>
<li><em>ZOOKEEPER_CLIENT_PORT</em> : 주키퍼 client 의 포트를 지정 (기본 주키퍼 포트인 <code>2181</code>로 지정)</li>
</ul>
</section>
<section id="broker-service" class="level4">
<h4 class="anchored" data-anchor-id="broker-service">1.2 Broker Service</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">broker</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> confluentinc/cp-kafka:7.3.0</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> broker</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 9092:9092</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_BROKER_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_ZOOKEEPER_CONNECT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper:2181</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_ADVERTISED_LISTENERS</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<ul>
<li><em>KAFKA_BROKER_ID</em> : 브로커의 ID 지정</li>
<li><em>KAFKA_ZOOKEEPER_CONNECT</em> : 브로커가 주키퍼에 연결하기 위한 주소 지정 (일반적으로 <code>주키퍼 서비스 이름: 주키퍼 서비스 포트</code> 형식)</li>
<li><em>KAFKA_ADVERTISED_LISTENERS</em> : 내부와 외부에서 접속하기 위한 리스너를 설정, 일반적으로 internal 과 external 를 같이 설정</li>
<li><em>KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</em> : 보안을 위한 protocol mapping 을 설정, key/value 로 매핑됨</li>
<li><em>KAFKA_INTER_BROKER_LISTENER_NAME</em> : 컨테이너 내부에서 사용할 리스너 이름을 지정</li>
<li><em>KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</em> : 토픽을 분산하여 저장할 Replication Factor 를 설정</li>
<li><em>KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS</em> : 카프카 클러스터에서 초기에 rebalancing 할 때 Consumer 들이 Consumer group 에 조인할 때 대기하는 시간</li>
</ul>
</section>
<section id="전체-코드와-실행" class="level4">
<h4 class="anchored" data-anchor-id="전체-코드와-실행">1.3 전체 코드와 실행</h4>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># naive-docker-compose.yaml</span></span>
<span id="cb3-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">zookeeper</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> confluentinc/cp-zookeeper:7.3.0</span></span>
<span id="cb3-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper</span></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 2181:2181</span></span>
<span id="cb3-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ZOOKEEPER_SERVER_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ZOOKEEPER_CLIENT_PORT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2181</span></span>
<span id="cb3-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">broker</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> confluentinc/cp-kafka:7.3.0</span></span>
<span id="cb3-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> broker</span></span>
<span id="cb3-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper</span></span>
<span id="cb3-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 9092:9092</span></span>
<span id="cb3-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb3-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_BROKER_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_ZOOKEEPER_CONNECT</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> zookeeper:2181</span></span>
<span id="cb3-23"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_ADVERTISED_LISTENERS</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092</span></span>
<span id="cb3-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_LISTENER_SECURITY_PROTOCOL_MAP</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT</span></span>
<span id="cb3-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_INTER_BROKER_LISTENER_NAME</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> PLAINTEXT</span></span>
<span id="cb3-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span></span>
<span id="cb3-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span></span></code></pre></div>
<p><code>$ docker compose -p part7-naive -f naive-docker-compose.yaml up -d</code> 를 이용하여 서비스를 실행시킴</p>
<ul>
<li><em>-f</em> : 해당 도커 컴포즈 파일의 이름을 입력</li>
</ul>
</section>
</section>
<section id="producer-consumer-setup" class="level3">
<h3 class="anchored" data-anchor-id="producer-consumer-setup">2. Producer &amp; Consumer Setup</h3>
<p>토픽과 Producer 와 Consumer 를 생성</p>
<section id="topic" class="level4">
<h4 class="anchored" data-anchor-id="topic">2.1 Topic</h4>
<p><code>$ docker compose -p part7-naive exec broker kafka-topics --create --topic topic-test --bootstrap-server broker:29092 --partitions 1 --replication-factor 1</code> 명령어 입력</p>
<ul>
<li><em>docker compose exec</em> : 컨테이너 내에 명령어 수행</li>
<li><em>broker</em> : 생성된 브로커 서비스의 이름을 적음</li>
<li><em>kafka-topics</em> : 토픽에 대한 명령을 실행</li>
<li><em>–create</em> : 토픽 생성</li>
<li><em>–topic</em> : 생성할 토픽의 이름 지정</li>
<li><em>–bootstrap-server</em> : 브로커 서비스에 대한 호스트 이름과 포트를 지정</li>
<li><em>–partitions</em> : 토픽 내에 파티션 개수를 설정</li>
<li><em>–replication-factor</em> : Replication Factor 지정</li>
</ul>
<p><code>$ docker compose -p part7-naive exec broker kafka-topics --describe --topic topic-test --bootstrap-server broker:29092</code> 명령어 입력</p>
<ul>
<li><em>–describe</em> : 생성된 토픽에 대한 상세 설명을 보여줌</li>
</ul>
</section>
<section id="consumer" class="level4">
<h4 class="anchored" data-anchor-id="consumer">2.2 Consumer</h4>
<p>토픽을 생성했으니 생성한 토픽을 사용할 Consumer 를 만듬</p>
<p>Consumer 를 먼저 실행하는 이유는 일반적으로 Consumer 가 메시지를 subscribe 하려고 대기하는 상태에서 Producer 가 메시지를 생성해서 보내기 때문</p>
<ol type="1">
<li><p><code>docker compose exec</code> 명령어를 통해 컨테이너 내부로 접속</p>
<pre class="terminal"><code># terminal 1
$ docker compose -p part7-naive exec broker /bin/bash
</code></pre></li>
<li><p><code>kafka-console-consumer</code> 를 이용하여 <code>topic-test</code> 토픽을 subscribe 함</p>
<pre class="terminal"><code>$ kafka-console-consumer --topic topic-test --bootstrap-server broker:29092
</code></pre>
<p>-&gt; 수신 대기 하는 모습을 보임</p></li>
</ol>
</section>
<section id="producer" class="level4">
<h4 class="anchored" data-anchor-id="producer">2.3 Producer</h4>
<ol type="1">
<li><p>Consumer 와 같이 <code>docker compose exec</code> 명령어를 통해 컨테이너 내부로 접속</p>
<pre class="terminal"><code># terminal 2
$ docker compose -p part7-naive exec broker /bin/bash
</code></pre>
<p>-&gt; 이 때 위에서 사용했던 터미널이 아닌 새로운 터미널을 사용해야 함</p></li>
<li><p><code>kafka-console-producer</code> 를 이용하여 <code>topic-test</code> 토픽에 접근하여 publish 할 준비를 함</p>
<pre class="terminal"><code>$ kafka-console-producer --topic topic-test --broker-list broker:29092
</code></pre>
<p>-&gt; 명령어를 실행하면 publish 할 수 있는 상태가 됨</p></li>
</ol>
</section>
<section id="communicate" class="level4">
<h4 class="anchored" data-anchor-id="communicate">2.4 Communicate</h4>
<p>Producer 가 열려 있는 두 번째 터미널에서 메시지를 입력하면 Consumer 가 열려 있는 첫 번째 터미널에서 메시지를 확인할 수 있음</p>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-26-MLOps-day16/index.html</guid>
  <pubDate>Mon, 25 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/118/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 15</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-20-MLOps-day15/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>메시징 시스템에 대한 정보</p></li>
<li><p>Kafka 의 전체 아키텍처에 대한 정보</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="메시징-시스템" class="level3">
<h3 class="anchored" data-anchor-id="메시징-시스템">1. 메시징 시스템</h3>
<p>메시징 시스템 (Message System) : 서로 다른 어플리케이션끼리 정보를 교환하기 위해 메시지의 생성, 전송, 전달 및 저장을 가능하게 하는 시스템</p>
<p>대표적으로 Kafka, RabbitMQ, Active MQ, AWS SQS, Java JMS 등이 있음</p>
<p>메시지 : 하나의 entity 에서 다른 하나의 entity 로 정보를 전송하는 데 사용되는 통신 아티팩트</p>
<p>이러한 시스템은 주로 하나의 어플리케이션이 여러 외부 어플리케이션이나 하나 이상의 데이터 소스로부터 데이터를 받는 어플리케이션에 의해 처리된 데이터를 전달받고 싶을 때 사용함</p>
<p>메시징 시스템은 메시지 생산자 (message producer) 와 메시지 소비자 (message consumers) 사이에 약한 결합성 (loose coupling) 을 갖도록 함</p>
<p>약한 결합성 : 한 쪽이 끊기거나 변경이 있어도 다른 쪽에는 미치는 영향이 작은 것</p>
<p>메시징 시스템을 이용하면 메시지 생산자와 소비자는 서로를 알지 못함</p>
<p>이러한 메시징 시스템의 특징은 동적이고, 신뢰성 있고 유연한 시스템을 구현할 수 있도록 해주며, 그에 따라 시스템의 나머지 부분에 영향을 주지 않고 하위 어플리케이션의 전체적인 구성을 변경할 수 있음</p>
<p>또한 높은 확장석과 서로 다른 네트워크 사이의 쉬운 통합성과 안정성이 있음</p>
<p>메시징 시스템의 안정적이고 확장 가능한 특징 때문에, 많은 개발자들이 비지니스와 컴퓨팅 사이언스 문제를 해결하기 위해 사용하고 있음</p>
<p>Ex) 워크플로우, 네트워크 관리, 통신 서비스, 고객 관리, 일기 예보 시스템 등</p>
<section id="용어-정리" class="level4">
<h4 class="anchored" data-anchor-id="용어-정리">1.1 용어 정리</h4>
<p><strong>Message Oriented Middleware (MOM)</strong></p>
<ul>
<li>독립된 어플리케이션 간에 데이터를 주고받을 수 있도록 하는 시스템 디자인
<ul>
<li>함수 호출, 공유메모리 등의 방식이 아닌, 메시지 교환을 이용하는 중간 계층에 대한 인프라 아키텍처</li>
<li>분산 컴퓨팅이 가능해지며, 서비스간의 결합성이 낮아짐</li>
</ul></li>
<li>비동기 (asynchronous) 로 메시지를 전달</li>
<li>Queue, Broadcast, Multicast 등의 방식으로 메시지를 전달</li>
<li>Publish/Subscribe (Pub/Sub) 구조
<ul>
<li>메시지를 발행하는 Publisher, 메시지를 소비하는 Subscriber 로 구성</li>
</ul></li>
</ul>
<p><strong>Message Broker</strong></p>
<ul>
<li>메시지 처리 또는 메시지 수신자에게 메시지를 전달하는 시스템이며, 일반적으로 MOM 을 기반으로 구축됨</li>
</ul>
<p><strong>Mesage Queue (MQ)</strong></p>
<ul>
<li>Message Broker 와 MOM 을 구현한 소프트웨어 (RabbitMQ, ActiveMQ, Kafka 등)</li>
</ul>
<p><strong>Advanced Message Queueing Protocol (AMQP)</strong></p>
<ul>
<li>메시지를 안정적으로 주고받기 위한 인터넷 프로토콜</li>
<li>MOM 은 메시지 전송 보장을 해야하므로 AMQP 를 구현</li>
</ul>
<p>(Kafka 는 AMQP 를 구현한 MOM 시스템임)</p>
</section>
</section>
<section id="kafka" class="level3">
<h3 class="anchored" data-anchor-id="kafka">2. Kafka</h3>
<section id="features" class="level4">
<h4 class="anchored" data-anchor-id="features">2.1 Features</h4>
<p>Kafka 는 Open-source Distributed Event Streaming Platform 임</p>
<p>Event Streaming : 데이터베이스, 센서, 모바일기기, 어플리케이션 등과 같은 곳에서 발생하는 데이터를 event stream 형태로 저장해서 나중에 검색할 수 있도록 하는 것</p>
<p>-&gt; 발생하는 데이터를 실시간으로 처리하고, 필요에 따라서 데이터가 또다른 target 시스템으로 event stream 을 라우팅 해주는 것</p>
<p><strong>Event Streaming Platform</strong></p>
<ul>
<li>Event stream 을 실시간으로 처리하고 계속 쌓이는 데이터를 지속적으로 보관하다가 그 데이터를 쓰려고 하는 다른 target 시스템들이 가져갈 수 있도록 제공</li>
</ul>
<p><strong>Publish/Subscribe (Pub/Sub) 구조</strong></p>
<ul>
<li>다른 시스템에서 데이터를 가져와서 Kafka 에 publish 하거나 Kafka 로부터 데이터를 subscribe 할 수 있는 기능을 제공</li>
</ul>
<p><strong>Decoupling</strong></p>
<ul>
<li>Kafka 에서는 Pub/Sub 구조를 구현하기 위해 Producer 와 Consumer 가 존재함, 두 객체는 서로 의존적이지 않고 완벽하게 분리되어 있음
<ul>
<li>Producer : Kafka 에 event 를 Publish 하는 client application</li>
<li>Consumer : Kafka 로부터 event 를 Subscribe 하는 client application</li>
</ul></li>
</ul>
</section>
<section id="kafka-architecture" class="level4">
<h4 class="anchored" data-anchor-id="kafka-architecture">2.2 Kafka Architecture</h4>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-20-MLOps-day15/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Kafka Architecture</figcaption>
</figure>
</div>
</section>
</section>
<section id="kafka-components" class="level3">
<h3 class="anchored" data-anchor-id="kafka-components">3. Kafka Components</h3>
<section id="broker" class="level4">
<h4 class="anchored" data-anchor-id="broker">3.1 Broker</h4>
<p>브로커 (Broker) : 메시징 서비스를 담당해주는 Kafka 서버 또는 Kafka 시스템을 말함, 하나의 브로커는 하나의 Kafka Broker Process 를 의미</p>
<p>프로세스를 구동하는 방법에 따라 다양한 방법으로 클러스터를 구성할 수 있는데 주로 단일 브로커가 아닌 다중 브로커를 사용함</p>
<p>-&gt; 브로커가 여러 개일 경우, 각각의 브로커들은 ID 로 식별함</p>
<p>브로커의 주요 역할은 토픽 (Topic) 내의 파티션 (Partition) 들의 분산, 유지 및 관리하는 것</p>
</section>
<section id="kafka-cluster" class="level4">
<h4 class="anchored" data-anchor-id="kafka-cluster">3.2 Kafka Cluster</h4>
<p>Kafka 클러스터는 여러 개의 브로커로 이루어진 집합체를 말함</p>
<p>일반적으로 최소 3대 이상의 브로커를 하나의 클러스터로 구성함</p>
</section>
<section id="topic" class="level4">
<h4 class="anchored" data-anchor-id="topic">3.3 Topic</h4>
<p>토픽이란 브로커에서 event (data) 를 관리하는 “기준” 또는 어떤 event 를 저장할 지를 정하는 “주제” 임</p>
<p>토픽은 파일 시스템의 “폴더” 와 같고, event 는 폴더 속의 “파일” 과 같음</p>
</section>
<section id="partition" class="level4">
<h4 class="anchored" data-anchor-id="partition">3.4 Partition</h4>
<p>토픽에는 파티션이 존재하며 모든 파티션들은 Producer 로부터 전달된 데이터를 보관하는 역할을 함</p>
<p>-&gt; 리더 파티션 (Leader Partition): Producer 또는 Consumer 와 직접 통신하며 read 와 write 연산을 담당함</p>
<p>-&gt; 팔로워 파티션 (Follower Partition): Producer 에 의해 리더 파티션으로 전달된 데이터를 복제하여 저장하고 리더 파티션이 속해있는 브로커에 장애가 발생하면 팔로워 파티션이 리더 파티션의 지위를 가지게 됨</p>
<p>Replication Factor 에 따라 리더 파티션과 팔로워 파티션의 개수가 정해짐</p>
<p>Ex) Replication Factor 가 1이라면 리더 파티션만 존재, 3이라면 하나의 리더 파티션과 두개의 팔로워 파티션을 가짐</p>
</section>
<section id="zookeeper" class="level4">
<h4 class="anchored" data-anchor-id="zookeeper">3.5 Zookeeper</h4>
<p>주키퍼란 분산 시스템에서 시스템 간의 정보 유지, 상태 체크, 서버들 간의 동기화 등을 처리해주는 분산 코디네이션 서비스임</p>
<p>직접 어플리케이션 작업을 조율하지 않고, 조율하는 것을 쉽게 개발할 수 있도록 도와줌</p>
<p>API 를 이용하여 동기화를 하거나 마스터 선출 등의 작업을 쉽게 구현할 수 있게 해줌</p>
<p>위의 카프카 아키텍쳐 그림에서 주키퍼 앙상블이란 주키퍼 서버의 클러스터를 뜻함</p>
<p>하나의 주키퍼 서버에 문제가 생겼을 경우, 주키퍼 서버들에 쌓이는 데이터를 기준으로 일관성을 맞추기 때문에 클러스터는 보통 홀수로 구축하며 최소 3개에서 일반적으로 5개를 권장함</p>
<p>주키퍼에서도 파티션처럼 하나의 리더 서버가 있고, write 를 담당함</p>
<p>나머지 팔로워 서버들은 read 를 담당함</p>
</section>
<section id="producer-consumer" class="level4">
<h4 class="anchored" data-anchor-id="producer-consumer">3.6 Producer &amp; Consumer</h4>
<p>Producer 는 “메시지를 생산” 해서 브로커의 토픽으로 메시지를 보내는 역할을 하는 어플리케이션 또는 서버임</p>
<ul>
<li>데이터를 전송할 때 리더 파티션을 가지고 있는 브로커와 직접 통신함</li>
<li>원하는 토픽의 파티션에 전송만하며 이후에 어떤 Consumer 에게 전송되는 지는 신경쓰지 않음</li>
</ul>
<p>Consumer 는 토픽의 파티션에 저장되어 있는 “메시지를 소비” 하는 역할을 하는 어플리케이션 또는 서버임</p>
<ul>
<li>데이터를 요청할 때 리더 파티션을 가지고 있는 브로커와 통신하여 토픽의 파티션으로부터 데이터를 가져감</li>
<li>토픽의 특정 파티션만 구독하는 Consumer 를 운영 or 1개 이상의 Consumer 로 이루어진 Consumer 그룹을 운영</li>
<li>어떤 Producer 에게서 메시지가 왔는지는 관심이 없고, 원하는 토픽의 파티션을 읽어서 필요한 메시지만 받음</li>
</ul>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-20-MLOps-day15/index.html</guid>
  <pubDate>Tue, 19 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/117/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 14</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-16-MLOps-day14/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>Dockerfile 과 Docker Compose 파일 작성</p></li>
<li><p>API 서버 동작 확인</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="dockerfile-작성" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile-작성">1. Dockerfile 작성</h3>
<p>Model API 를 작동시킬 수 있는 API 서버의 Docker Image</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> amd64/python:3.9-slim</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WORKDIR</span> /usr/app</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> pip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install mlflow==1.30.0 pandas scikit-learn <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fastapi[all]"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> schemas.py schemas.py</span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> app.py app.py</span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> sk_model/ sk_model/</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uvicorn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"app:app"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--host"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--reload"</span>]</span></code></pre></div>
</section>
<section id="docker-compose" class="level3">
<h3 class="anchored" data-anchor-id="docker-compose">2. Docker Compose</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">api-with-model</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Dockerfile</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> api-with-model</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 8000:8000</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> CMD</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> curl -X POST http://localhost:8000/predict</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -H</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Content-Type: application/json"</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -d</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">'{"sepal_length": 6.7, "sepal_width": 3.3, "petal_length": 5.7, "petal_width": 2.1}'</span></span>
<span id="cb2-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 10s</span></span>
<span id="cb2-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb2-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">retries</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb2-22"></span>
<span id="cb2-23"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">networks</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-24"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">default</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlops-network</span></span>
<span id="cb2-26"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">external</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">true</span></span></code></pre></div>
</section>
<section id="api-서버-작동-확인" class="level3">
<h3 class="anchored" data-anchor-id="api-서버-작동-확인">3. API 서버 작동 확인</h3>
<p><code>http://localhost:8000/docs</code> 에 접속하여 Request Body 의 형태에 맞게 데이터를 전달해주면 Response Body 로 inference 결과를 확인할 수 있음</p>
<p><code>curl</code> 을 이용하여 API 가 잘 작동하는지 확인하는 방법도 있음</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-16-MLOps-day14/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>curl</code> 로 정보를 전달하여 inference 결과를 확인할 수 있음</figcaption>
</figure>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-16-MLOps-day14/index.html</guid>
  <pubDate>Fri, 15 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/116/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 13</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>Iris 데이터를 입력받아 예측값을 반환하는 API 작성</p></li>
<li><p>제대로 동작하는지 확인</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="모델-다운로드" class="level3">
<h3 class="anchored" data-anchor-id="모델-다운로드">1. 모델 다운로드</h3>
<section id="environment-variables" class="level4">
<h4 class="anchored" data-anchor-id="environment-variables">1.1 Environment Variables</h4>
<p>Model Registry 에 저장되어 있는 모델을 다운로드하기 위해 MLflow 서버와 MinIO 서버에 접속하기 위한 정보를 환경 변수로 설정</p>
<p>-&gt; <code>day 7</code> 에서 작성한 코드와 같음</p>
</section>
<section id="모델-다운로드-함수-작성" class="level4">
<h4 class="anchored" data-anchor-id="모델-다운로드-함수-작성">1.2 모델 다운로드 함수 작성</h4>
<p><code>mlflow</code> 패키지를 이용하여 model artifact 다운로드</p>
<p>-&gt; model artifact 란 MLflow 에 모델이 저장될 때 함께 저장된 메타데이터와 모델 자체의 binary 파일을 의미</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_model(args):</span>
<span id="cb1-2">    mlflow.artifacts.download_artifacts(artifact_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"runs:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>run_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, dst_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span></code></pre></div>
</section>
<section id="모델-다운로드-1" class="level4">
<h4 class="anchored" data-anchor-id="모델-다운로드-1">1.3 모델 다운로드</h4>
<p><code>argparse</code> 를 이용하여 파라미터를 입력받을 수 있도록 하고 <code>download_model()</code> 함수를 호출함</p>
</section>
<section id="전체-코드" class="level4">
<h4 class="anchored" data-anchor-id="전체-코드">1.4 전체 코드</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> argparse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ArgumentParser</span>
<span id="cb2-3"></span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Set environments</span></span>
<span id="cb2-7">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_S3_ENDPOINT_URL"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9000"</span></span>
<span id="cb2-8">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_TRACKING_URI"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:5001"</span></span>
<span id="cb2-9">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_ACCESS_KEY_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minio"</span></span>
<span id="cb2-10">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_SECRET_ACCESS_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miniostorage"</span></span>
<span id="cb2-11"></span>
<span id="cb2-12"></span>
<span id="cb2-13"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> download_model(args):</span>
<span id="cb2-14">    <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Download model artifacts</span></span>
<span id="cb2-15">    mlflow.artifacts.download_artifacts(artifact_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"runs:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>run_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>, dst_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"."</span>)</span>
<span id="cb2-16"></span>
<span id="cb2-17"></span>
<span id="cb2-18"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb2-19">    parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArgumentParser()</span>
<span id="cb2-20">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--model-name"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_name"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sk_model"</span>)</span>
<span id="cb2-21">    parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--run-id"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run_id"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb2-22">    args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb2-23"></span>
<span id="cb2-24">    download_model(args)</span></code></pre></div>
</section>
<section id="스크립트-실행" class="level4">
<h4 class="anchored" data-anchor-id="스크립트-실행">1.5 스크립트 실행</h4>
<p><code>http://localhost:5001</code> 에 접속하여 해당 모델이 저장된 <code>experiment</code> 에 들어가 <code>run_id</code> 와 <code>model_name</code> 을 확인</p>
<p><code>$ python download_model.py --model-name {model-name} --run-id {run-id}</code></p>
<p>이 스크립트를 실행하고 나면 <code>model-name</code> 의 폴더가 생성되는 것을 확인할 수 있음</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">script 실행 모습</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>sk_model</code> 모델의 폴더 이름이 생겨남</figcaption>
</figure>
</div>
</section>
</section>
<section id="model-api-명세서-작성" class="level3">
<h3 class="anchored" data-anchor-id="model-api-명세서-작성">2. Model API 명세서 작성</h3>
<p><code>POST /predict</code> 를 수행했을 때 학습한 모델의 inference 결과를 반환해주는 API 명세서를 작성</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/fig3.png" class="img-fluid figure-img"></p>
</figure>
</div>
</section>
<section id="pydantic-model-로-스키마의-클래스-작성" class="level3">
<h3 class="anchored" data-anchor-id="pydantic-model-로-스키마의-클래스-작성">3. Pydantic Model 로 스키마의 클래스 작성</h3>
<p>명세서에 맞게 <code>Class PredictIn(BaseModel)</code> 와 <code>Class PredictOut(BaseModel)</code> 을 작성</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PredictIn(BaseModel):</span>
<span id="cb3-4">    sepal_length: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb3-5">    sepal_width: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb3-6">    petal_length: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb3-7">    petal_width: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">float</span></span>
<span id="cb3-8"></span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> PredictOut(BaseModel):</span>
<span id="cb3-10">    iris_class: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span></code></pre></div>
</section>
<section id="predict-api-구현" class="level3">
<h3 class="anchored" data-anchor-id="predict-api-구현">4. Predict API 구현</h3>
<section id="load-model" class="level4">
<h4 class="anchored" data-anchor-id="load-model">4.1 Load Model</h4>
<p><code>mlflow</code> 패키지를 활용하여 모델을 불러옴</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model():</span>
<span id="cb4-2">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.sklearn.load_model(model_uri <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./{model-name}"</span>) <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># sk_model</span></span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model</span>
<span id="cb4-4"></span>
<span id="cb4-5">MODEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span></code></pre></div>
</section>
<section id="create-a-fastapi-instance" class="level4">
<h4 class="anchored" data-anchor-id="create-a-fastapi-instance">4.2 Create a FastAPI Instance</h4>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span></code></pre></div>
</section>
<section id="write-predict-function" class="level4">
<h4 class="anchored" data-anchor-id="write-predict-function">4.3 Write <code>predict</code> function</h4>
<p>API 에 <code>POST /predict</code> 를 수행했을 때 학습한 모델의 inference 결과를 반환할 수 있도록 <code>predict</code> 함수 작성</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/predict"</span>, response_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> PredictOut)</span>
<span id="cb6-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(data: PredictIn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> PredictOut:</span>
<span id="cb6-3">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()])</span>
<span id="cb6-4">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MODEL.predict(df).item()</span>
<span id="cb6-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> PredictOut(iris_class <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pred)</span></code></pre></div>
<ol type="1">
<li><code>predict</code> 함수는 <code>PredictIn</code> 클래스의 데이터를 입력으로 받고 <code>PredictOut</code> 클래스를 반환</li>
<li>입력받은 데이터를 데이터프레임 형태로 변환한 후, 위에서 불러온 모델을 이용하여 inference 결과를 저장</li>
<li>마지막으로 저장된 결과를 <code>PredictOut</code> 클래스에 넣어 반환</li>
</ol>
<p>POST method 를 이용하여 예측할 수 있도록 <code>@app.post</code> 를 이용한 데코레이터로 함수를 감싸주고, <code>response_model</code> 은 <code>PredictOut</code> 클래스로 지정</p>
</section>
<section id="전체-코드-1" class="level4">
<h4 class="anchored" data-anchor-id="전체-코드-1">4.4 전체 코드</h4>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># app.py</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb7-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb7-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb7-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> schemas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> PredictIn, PredictOut</span>
<span id="cb7-6"></span>
<span id="cb7-7"></span>
<span id="cb7-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_model():</span>
<span id="cb7-9">    model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.sklearn.load_model(model_uri<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"./sk_model"</span>)</span>
<span id="cb7-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> model</span>
<span id="cb7-11"></span>
<span id="cb7-12"></span>
<span id="cb7-13">MODEL <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_model()</span>
<span id="cb7-14"></span>
<span id="cb7-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb7-16">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb7-17"></span>
<span id="cb7-18"></span>
<span id="cb7-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/predict"</span>, response_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>PredictOut)</span>
<span id="cb7-20"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> predict(data: PredictIn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> PredictOut:</span>
<span id="cb7-21">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.DataFrame([data.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()])</span>
<span id="cb7-22">    pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> MODEL.predict(df).item()</span>
<span id="cb7-23">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> PredictOut(iris_class<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>pred)</span></code></pre></div>
</section>
</section>
<section id="api-작동-확인" class="level3">
<h3 class="anchored" data-anchor-id="api-작동-확인">5. API 작동 확인</h3>
<p><code>$ uvicorn app:app --reload</code> 를 입력하고 <code>http://localhost:8000/docs</code> 로 이동하여 동작을 확인</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/fig4.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Model API Server 동작</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/fig5.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Request Body 의 형태에 맞게 데이터 입력 화면, Response Body 에 추론 결과를 볼 수 있음</figcaption>
</figure>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-15-MLOps-day13/index.html</guid>
  <pubDate>Thu, 14 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/115/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 12</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-12-MLOps-day12/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>앞에서 작성한 API 를 Docker 를 이용하여 실행</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="dockerfile-작성" class="level3">
<h3 class="anchored" data-anchor-id="dockerfile-작성">1. Dockerfile 작성</h3>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> amd64/python:3.9-slim</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WORKDIR</span> /usr/app</span>
<span id="cb1-4"></span>
<span id="cb1-5"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> pip <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb1-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"fastapi[all]"</span></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> crud_pydantic.py crud_pydantic.py</span>
<span id="cb1-9"></span>
<span id="cb1-10"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"uvicorn"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"crud_pydantic:app"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--host"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"0.0.0.0"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--reload"</span>]</span></code></pre></div>
<section id="build" class="level4">
<h4 class="anchored" data-anchor-id="build">1.1 Build</h4>
<p>이미지 이름을 지정하고 build</p>
<p><code>$ docker build -t {image-name} .</code></p>
<p>이미지가 잘 생성되었는지 확인</p>
<p><code>$ docker image ls</code></p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-12-MLOps-day12/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">정상적으로 생성 된 모습</figcaption>
</figure>
</div>
</section>
<section id="run" class="level4">
<h4 class="anchored" data-anchor-id="run">1.2 Run</h4>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1">$ docker run <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>d <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-2">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">--</span>name {container<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name} <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-3">  <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>p <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span>:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">8000</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb2-4">  {image<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-</span>name}</span></code></pre></div>
<p><code>docker ps</code> 로 컨테이너 실행여부 확인</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-12-MLOps-day12/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">정상적으로 생성 된 모습</figcaption>
</figure>
</div>
</section>
</section>
<section id="api-서버에-접속하여-작동-확인" class="level3">
<h3 class="anchored" data-anchor-id="api-서버에-접속하여-작동-확인">2. API 서버에 접속하여 작동 확인</h3>
<p><code>http://localhost:8000/docs</code> 에 접속하여 정상적으로 동작하는지 확인</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-12-MLOps-day12/fig3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Swagger UI 화면이 정상적으로 뜸</figcaption>
</figure>
</div>
<section id="컨테이너-종료" class="level4">
<h4 class="anchored" data-anchor-id="컨테이너-종료">2.1 컨테이너 종료</h4>
<p><code>docker rm --force {container-name}</code></p>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://fastapi.tiangolo.com/tutorial/">FastAPI 튜토리얼</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-12-MLOps-day12/index.html</guid>
  <pubDate>Mon, 11 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/114/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 11</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-11-MLOps-day11/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>Create 부분을 Pydantic 을 이용하여 수정</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="pydantic-model" class="level3">
<h3 class="anchored" data-anchor-id="pydantic-model">1. Pydantic Model</h3>
<p>Request Body 는 client 에서 API 로 전송하는 데이터를 의미</p>
<p>Response Body 는 API 가 client 로 전송하는 데이터를 의미</p>
<section id="base-setting" class="level4">
<h4 class="anchored" data-anchor-id="base-setting">1.1 Base Setting</h4>
<p><code>pydantic</code> 으로부터 <code>BaseModel</code> 을 import 하고 <code>day 10</code> 에서 작성한 API 와 마찬가지로 <code>HTTPException</code> 을 이용하여 에러를 발생할 수 있도록 함</p>
</section>
<section id="define-input-schema" class="level4">
<h4 class="anchored" data-anchor-id="define-input-schema">1.2 Define Input Schema</h4>
<p>입력받아야 하는 데이터의 형태를 지정해주는 <code>CreateIn</code> 클래스 작성</p>
<p><code>pydantic</code> 의 <code>BaseModel</code> 을 상속받은 <code>CreateIn</code> 클래스에 Request Body 의 구성 요소가 될 변수들을 attribute 로 지정</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CreateIn(BaseModel):</span>
<span id="cb1-2">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb1-3">    nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span></code></pre></div>
</section>
<section id="define-output-schema" class="level4">
<h4 class="anchored" data-anchor-id="define-output-schema">1.3 Define Output Schema</h4>
<p>반환하고자 하는 데이터의 형태를 지정해주는 <code>CreateOut</code> 클래스 작성</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CreateOut(BaseModel):</span>
<span id="cb2-2">    status: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb2-3">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span></code></pre></div>
</section>
</section>
<section id="response-model" class="level3">
<h3 class="anchored" data-anchor-id="response-model">2. Response Model</h3>
<section id="response-model-1" class="level4">
<h4 class="anchored" data-anchor-id="response-model-1">2.1 Response Model</h4>
<p><code>@app.get()</code>, <code>@app.post()</code> 등 다양한 Path Operation 에 <code>response_model</code> 을 이용하여 Response Body 에 사용될 데이터 모델을 지정해줄 수 있음</p>
<p>output data 의 type 을 체크하여 자동으로 변환시키고, type 이 유효한지 확인해주고, response 를 위해 자동으로 JSON Schema 를 추가해주는 등의 역할을 할 수 있음</p>
</section>
<section id="api-code" class="level4">
<h4 class="anchored" data-anchor-id="api-code">2.2 API Code</h4>
<p>다음과 같이 Response Model 을 활용하여 Create API 를 수정할 수 있음</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>, response_model <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> CreateOut)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_user(user: CreateIn) <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">-&gt;</span> CreateOut:</span>
<span id="cb3-3">    USER_DB[user.name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> user.nickname</span>
<span id="cb3-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> CreateOut(status <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(USER_DB))</span></code></pre></div>
<p>Path Operation Function 을 보면 parameter 로 <code>user</code> 를 입력 받고, type 은 <code>CreateIn</code> 인 것을 알 수 있음</p>
</section>
<section id="crud_pydantic.py" class="level4">
<h4 class="anchored" data-anchor-id="crud_pydantic.py">2.3 <code>crud_pydantic.py</code></h4>
<p>전체 코드는 다음과 같음</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># crud_pydantic.py</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI, HTTPException</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> pydantic <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> BaseModel</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CreateIn(BaseModel):</span>
<span id="cb4-7">    name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-8">    nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-9"></span>
<span id="cb4-10"></span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">class</span> CreateOut(BaseModel):</span>
<span id="cb4-12">    status: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span></span>
<span id="cb4-13">    <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">id</span>: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span></span>
<span id="cb4-14"></span>
<span id="cb4-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb4-16">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb4-17"></span>
<span id="cb4-18"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User database</span></span>
<span id="cb4-19">USER_DB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb4-20"></span>
<span id="cb4-21"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fail response</span></span>
<span id="cb4-22">NAME_NOT_FOUND <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HTTPException(status_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, detail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name not found."</span>)</span>
<span id="cb4-23"></span>
<span id="cb4-24"></span>
<span id="cb4-25"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>, response_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>CreateOut)</span>
<span id="cb4-26"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_user(user: CreateIn):</span>
<span id="cb4-27">    USER_DB[user.name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> user.nickname</span>
<span id="cb4-28">    user_dict <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> user.<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">dict</span>()</span>
<span id="cb4-29">    user_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span></span>
<span id="cb4-30">    user_dict[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">len</span>(USER_DB)</span>
<span id="cb4-31">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> user_dict</span>
<span id="cb4-32"></span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb4-35"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-36">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb4-37">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb4-38">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nickname"</span>: USER_DB[name]}</span>
<span id="cb4-39"></span>
<span id="cb4-40"></span>
<span id="cb4-41"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.put</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb4-42"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-43">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb4-44">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb4-45">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb4-46">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span>
<span id="cb4-47"></span>
<span id="cb4-48"></span>
<span id="cb4-49"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.delete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb4-50"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-51">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb4-52">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb4-53">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> USER_DB[name]</span>
<span id="cb4-54">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div>
<p>실행하면 다음과 같은 모습을 보임</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-11-MLOps-day11/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>crud_pydantic.py</code> 실행 회면</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://fastapi.tiangolo.com/tutorial/">FastAPI 튜토리얼</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-11-MLOps-day11/index.html</guid>
  <pubDate>Sun, 10 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/113/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 10</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-09-MLOps-day10/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>FastAPI 을 이용하여 CRUD 를 수행하는 API 작성</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="api-명세서-작성" class="level3">
<h3 class="anchored" data-anchor-id="api-명세서-작성">1. API 명세서 작성</h3>
<p>CRUD : Create, Read, Updater, Delete 의 합친 단어</p>
<section id="path-parameter-아용" class="level4">
<h4 class="anchored" data-anchor-id="path-parameter-아용">1.1 Path Parameter 아용</h4>
<p>Path Parameter 의 경우 각 API 에서 사용되는 파라미터를 Path에 포함시켜 전달함</p>
<p>이를 고려하여 명세서를 작성하면 다음과 같음</p>
<ol type="1">
<li><p>Create</p>
<p>이름과 별명을 입력하여 사용자를 생성함</p>
<p><code>POST /users/name/{name}/nickname/{nickname}</code></p></li>
<li><p>Read</p>
<p>이름을 입력하여 해당 이름을 가진 사용자의 별명을 반환</p>
<p><code>GET /users/name/{name}</code></p></li>
<li><p>Update</p>
<p>이름과 새로운 별명을 입력하여 해당 이름을 가진 사용자의 별명을 업데이트</p>
<p><code>PUT /users/name/{name}/nickname/{nickname}</code></p></li>
<li><p>Delete</p>
<p>이름을 입력하여 해당 이름을 가진 사용자의 정보를 삭제</p>
<p><code>DELETE /users/name/{name}</code></p></li>
</ol>
</section>
<section id="query-parameter-이용" class="level4">
<h4 class="anchored" data-anchor-id="query-parameter-이용">1.2 Query Parameter 이용</h4>
<p>Query Parameter 의 경우 각 API 에서 사용되는 파라미터를 Query 형태로 전달함</p>
<p>이를 고려하여 명세서를 작성하면 다음과 같음</p>
<ol type="1">
<li><p>Create</p>
<p><code>POST /users?name=hello?nickname=world</code></p></li>
<li><p>Read</p>
<p><code>GET /users?name=hello</code></p></li>
<li><p>Update</p>
<p><code>PUT /users?name=hello&amp;nickname=world2</code></p></li>
<li><p>Delete</p>
<p><code>DELETE /users?name=hello</code></p></li>
</ol>
</section>
</section>
<section id="api-구현" class="level3">
<h3 class="anchored" data-anchor-id="api-구현">2. API 구현</h3>
<p>작성한 명세서를 FastAPI 를 이용해 구현</p>
<p>FastAPI 클래스의 인스턴스를 생성한 후 입력받은 데이터를 저장할 수 있도록 <code>USER_DB</code> 를 생성</p>
<p>또한 메모리에 존재하지 않는 이름에 대한 요청이 들어온 경우 에러를 발생할 수 있도록 <code>HTTPException</code> 을 이용하여 <code>NAME_NOT_FOUND</code> 를 선언</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI, HTTPException</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb1-4">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb1-5"></span>
<span id="cb1-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User database</span></span>
<span id="cb1-7">USER_DB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fail response</span></span>
<span id="cb1-10">NAME_NOT_FOUND <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HTTPException(status_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, detail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name not found."</span>)</span></code></pre></div>
<section id="path-parameter-이용" class="level4">
<h4 class="anchored" data-anchor-id="path-parameter-이용">2.1 Path Parameter 이용</h4>
<ol type="1">
<li><p>Create</p>
<p>이름과 별명을 입력 받아 <code>USER_DB</code> 에 정보를 저장하고 상태 정보를 return</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/nickname/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{nickname}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb2-3">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb2-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div></li>
<li><p>Read</p>
<p>이름을 입력 받아 <code>USER_DB</code> 에서 별명을 찾아 return</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb3-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb3-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb3-5">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nickname"</span>: USER_DB[name]}</span></code></pre></div></li>
<li><p>Update</p>
<p>이름과 새로운 별명을 입력 받아 <code>USER_DB</code> 의 정보를 업데이트하고 상태 정보를 return</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.put</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/nickname/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{nickname}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb4-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb4-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb4-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb4-5">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb4-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div></li>
<li><p>Delete</p>
<p>이름을 입력 받아 <code>USER_DB</code> 에서 정보를 삭제하고 상태 정보를 return</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.delete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb5-4">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb5-5">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> USER_DB[name]</span>
<span id="cb5-6">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div></li>
</ol>
<p>이를 합치면 코드는 다음과 같음</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># crud_path.py</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI, HTTPException</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb6-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb6-6"></span>
<span id="cb6-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User database</span></span>
<span id="cb6-8">USER_DB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fail response</span></span>
<span id="cb6-11">NAME_NOT_FOUND <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HTTPException(status_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, detail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name not found."</span>)</span>
<span id="cb6-12"></span>
<span id="cb6-13"></span>
<span id="cb6-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/nickname/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{nickname}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-16">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb6-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span>
<span id="cb6-18"></span>
<span id="cb6-19"></span>
<span id="cb6-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb6-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb6-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nickname"</span>: USER_DB[name]}</span>
<span id="cb6-25"></span>
<span id="cb6-26"></span>
<span id="cb6-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.put</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/nickname/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{nickname}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb6-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb6-31">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb6-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span>
<span id="cb6-33"></span>
<span id="cb6-34"></span>
<span id="cb6-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.delete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/name/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{name}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb6-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb6-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb6-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> USER_DB[name]</span>
<span id="cb6-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-09-MLOps-day10/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>https://localhost:8000/docs</code> 에 접속</figcaption>
</figure>
</div>
</section>
<section id="query-parameter-이용-1" class="level4">
<h4 class="anchored" data-anchor-id="query-parameter-이용-1">2.2 Query Parameter 이용</h4>
<p>Path Parameter 와 같이 명세서에 따라 작성하고 코드를 하나로 합치면 다음과 같음</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># crud_query.py</span></span>
<span id="cb7-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI, HTTPException</span>
<span id="cb7-3"></span>
<span id="cb7-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb7-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb7-6"></span>
<span id="cb7-7"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># User database</span></span>
<span id="cb7-8">USER_DB <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {}</span>
<span id="cb7-9"></span>
<span id="cb7-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Fail response</span></span>
<span id="cb7-11">NAME_NOT_FOUND <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> HTTPException(status_code<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">400</span>, detail<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Name not found."</span>)</span>
<span id="cb7-12"></span>
<span id="cb7-13"></span>
<span id="cb7-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.post</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb7-15"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> create_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-16">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb7-17">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span>
<span id="cb7-18"></span>
<span id="cb7-19"></span>
<span id="cb7-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb7-21"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-22">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb7-23">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb7-24">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"nickname"</span>: USER_DB[name]}</span>
<span id="cb7-25"></span>
<span id="cb7-26"></span>
<span id="cb7-27"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.put</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb7-28"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> update_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, nickname: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-29">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb7-30">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb7-31">    USER_DB[name] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> nickname</span>
<span id="cb7-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span>
<span id="cb7-33"></span>
<span id="cb7-34"></span>
<span id="cb7-35"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.delete</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users"</span>)</span>
<span id="cb7-36"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> delete_user(name: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb7-37">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> name <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">in</span> USER_DB:</span>
<span id="cb7-38">        <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">raise</span> NAME_NOT_FOUND</span>
<span id="cb7-39">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">del</span> USER_DB[name]</span>
<span id="cb7-40">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"status"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"success"</span>}</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-09-MLOps-day10/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>https://localhost:8000/docs</code> 에 접속</figcaption>
</figure>
</div>
</section>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://fastapi.tiangolo.com/tutorial/">FastAPI 튜토리얼</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-09-MLOps-day10/index.html</guid>
  <pubDate>Fri, 08 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/112/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 9</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-07-MLOps-day9/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>FastAPI 의 공식 문서를 참고하여 간단한 API 제작</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="fastapi-를-이용해-간단한-api-만들어보기" class="level3">
<h3 class="anchored" data-anchor-id="fastapi-를-이용해-간단한-api-만들어보기">1. FastAPI 를 이용해 간단한 API 만들어보기</h3>
<section id="main.py" class="level4">
<h4 class="anchored" data-anchor-id="main.py">1.1 <code>main.py</code></h4>
<p>다음과 같이 <code>main.py</code> 를 작성</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># main.py</span></span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb1-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb1-6"></span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_root():</span>
<span id="cb1-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span>}</span></code></pre></div>
</section>
<section id="실행" class="level4">
<h4 class="anchored" data-anchor-id="실행">1.2 실행</h4>
<p><code>$ uvicorn main:app --relaod</code> - <em>uvicorn</em> : FastAPI 를 실행하는 웹 서버 실행 Command Line Too - <em>main</em> : 위에서 작성한 Python 모듈 <code>main.py</code> 를 의미 - <em>app</em> : <code>main.py</code> 에서 <code>app = FastAPI()</code> 를 통해 생성된 객체를 의미 - <em>–reload</em> : 코드가 바뀌었을 때 서버가 재시작할 수 있도록 하는 옵션</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-07-MLOps-day9/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>main.py</code> 실행 화면</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-07-MLOps-day9/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">docs 에 진입한 화면</figcaption>
</figure>
</div>
<p>이는 Swagger UI 에 의해 제공되는 interactive API documentation 임</p>
</section>
</section>
<section id="step-by-step-으로-이해하기" class="level3">
<h3 class="anchored" data-anchor-id="step-by-step-으로-이해하기">2. Step by Step 으로 이해하기</h3>
<section id="step-1-import-fastapi" class="level4">
<h4 class="anchored" data-anchor-id="step-1-import-fastapi">2.1 Step 1: Import FastAPI</h4>
<p><code>from fastapi import FastAPI</code></p>
<p>API 를 만들 수 있도록 도와주는 Python 클래스</p>
</section>
<section id="step-2-create-a-fastapi-instance" class="level4">
<h4 class="anchored" data-anchor-id="step-2-create-a-fastapi-instance">2.2 Step 2: Create a FastAPI instance</h4>
<p><code>FastAPI</code> 클래스의 인스턴스를 생성된</p>
<p>여기서 생성하는 인스턴스의 이름에 따라 <code>uvicorn main:app --reload</code> 과 같은 형태로 실행 명령어가 달라짐</p>
<p><code>app = FastAPI()</code></p>
</section>
<section id="step-3-create-a-path-operation" class="level4">
<h4 class="anchored" data-anchor-id="step-3-create-a-path-operation">2.3 Step 3: Create a Path Operation</h4>
<p>여기서 말하는 path 는 URL 에서 첫 번째 <code>/</code> 부터 시작되는 마지막 부분을 의미함</p>
<p>Ex) <code>https://example.com/items/foo</code> 에서 <code>/items/foo</code> 에 해당함</p>
<p>Operation 은 POST, GET, PUT, DELETE 등과 같은 HTTP Method 를 의미함</p>
<p>이러한 Operation 을 수행하기 위해 <code>@app.get("/")</code> 와 같은 Path Operation Decorator 를 사용</p>
<p><code>@app.get("/")</code> 은 FastAPI 로 하여금 path <code>/</code> 로 가서 <code>GET</code> operation 을 수행하라는 의미로 사용할 수 있음</p>
</section>
<section id="step-4-define-the-path-operation-function" class="level4">
<h4 class="anchored" data-anchor-id="step-4-define-the-path-operation-function">2.4 Step 4: Define the Path Operation Function</h4>
<p>Path Operation Function 은 Path Operation 이 수행되었을 때 호출될 Python 함수를 말함</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/"</span>)</span>
<span id="cb2-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_root():</span>
<span id="cb2-3">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Hello"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"World"</span>}</span></code></pre></div>
</section>
<section id="step-5-return-the-content" class="level4">
<h4 class="anchored" data-anchor-id="step-5-return-the-content">2.5 Step 5: Return the content</h4>
<p>Path Operation Function 을 통해 return 하는 값으로는 <code>dict</code>, <code>list</code>, <code>str</code>, <code>int</code> 등이 가능</p>
<p>또한, 뒤에서 나올 Pydantic Model 의 형태로도 return 할 수 있음</p>
</section>
</section>
<section id="path-parameter-이해하기" class="level3">
<h3 class="anchored" data-anchor-id="path-parameter-이해하기">3. Path Parameter 이해하기</h3>
<p>Path parameter 는 Path Operation 에 포함된 변수로 사용자에게 입력받아 function 의 argument 로 사용되는 parameter 를 의미함</p>
<p><a href="https://fastapi.tiangolo.com/tutorial/path-params/">Path parameter 참고</a></p>
<p>다음과 같이 코드를 작성하고 <code>uvicorn path_param:app --reload</code> 를 입력하여 실행함</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># path_param.py</span></span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb3-3"></span>
<span id="cb3-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb3-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb3-6"></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/items/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{item_id}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb3-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_item(item_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>):</span>
<span id="cb3-10">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_id"</span>: item_id}</span></code></pre></div>
<p><code>item_id</code> 와 같은 parameter 를 Path parameter 라고 함, 여기서 입력된 Path Parameter 의 값은 function 에 argument 로 전달되어 함수가 호출됨</p>
<p><code>def read_item(item_id: int)</code> 와 같이 type 을 제공할 수 있음</p>
<p>만약 다른 type 의 데이터가 입력되면 HTTP Error 를 return 하게 됨</p>
</section>
<section id="query-parameter-이해하기" class="level3">
<h3 class="anchored" data-anchor-id="query-parameter-이해하기">4. Query Parameter 이해하기</h3>
<p>Query Parameter 는 function parameter 로는 사용되지만 Path Operation 에 포함되지 않아 Path Parameter 라고 할 수 없는 parameter 를 의미함</p>
<p><a href="https://fastapi.tiangolo.com/tutorial/query-params/">Query parameter 참고</a></p>
<p>다음과 같이 코드를 작성하고 <code>uvicorn query_param:app --reload</code> 를 입력하여 실행함</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># query_param.py</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb4-3"></span>
<span id="cb4-4"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb4-5">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb4-6"></span>
<span id="cb4-7">fake_items_db <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> [{<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Foo"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Bar"</span>}, {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_name"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Baz"</span>}]</span>
<span id="cb4-8"></span>
<span id="cb4-9"></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/items/"</span>)</span>
<span id="cb4-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_item(skip: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">0</span>, limit: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>):</span>
<span id="cb4-12">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> fake_items_db[skip : skip <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">+</span> limit]</span></code></pre></div>
<p>function 에 parameter 로 들어있는 <code>skip</code> 과 <code>limit</code> 이 Path Operation 인 <code>@app.get("/items")</code> 에 들어있지 않음</p>
<p>Query 는 URL 에서 <code>?</code> 뒤에 key-value 쌍의 형태로 나타나고, <code>&amp;</code> 로 구분되어 사용됨</p>
<p>Ex) <code>http://localhost:8000/items/?skip=0&amp;limit=10</code> 과 같은 형태로 사용</p>
<p>Query Parameter 는 path 의 고정된 부분이 아니기 때문에 optional 로 사용될 수 있고 기본값을 가질 수 있음</p>
<p>위의 예시에서는 <code>skip=0</code> 과 <code>limit=10</code> 의 기본값을 가지고 있음</p>
<p>하지만 값을 입력받아야만 하는 Query Parameter 도 존재함</p>
<p>이를 Required Query Parameter 라고 하고 다음과 같은 형태로 사용됨</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/items/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{item_id}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb5-2"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user_item(item_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, needy: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>):</span>
<span id="cb5-3">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_id"</span>: item_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"needy"</span>: needy}</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> item</span></code></pre></div>
<p>위의 예시에서 <code>needy</code> 는 Path Operation <code>@app.get("/items/{item_id}")</code> 에 포함되어 있지 않으므로 Query Parameter 이고, function <code>read_user_item()</code> 에서 기본값이 존재하지 않기 때문에 Required Query Parameter 임을 알 수 있음</p>
<p>이러한 경우 <code>http://localhost:8000/items/foo-item?needy=someneedy</code> 와 같은 형태로 <code>?</code> 뒤에 입력을 해주어야 에러가 발생하지 않고 함수가 제대로 동작함</p>
</section>
<section id="multiple-path-and-query-parameters-사용해보기" class="level3">
<h3 class="anchored" data-anchor-id="multiple-path-and-query-parameters-사용해보기">5. Multiple Path and Query Parameters 사용해보기</h3>
<p><a href="https://fastapi.tiangolo.com/tutorial/query-params/#multiple-path-and-query-parameters">Multiple Path and Query Parameter 참고</a></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># multi_param.py</span></span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> typing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Union</span>
<span id="cb6-3"></span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> fastapi <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> FastAPI</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Create a FastAPI instance</span></span>
<span id="cb6-7">app <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> FastAPI()</span>
<span id="cb6-8"></span>
<span id="cb6-9"></span>
<span id="cb6-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">@app.get</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"/users/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{user_id}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">/items/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{item_id}</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb6-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> read_user_item(user_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">int</span>, item_id: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, q: Union[<span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">None</span>, short: <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">bool</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>):</span>
<span id="cb6-12">    item <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"item_id"</span>: item_id, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"owner_id"</span>: user_id}</span>
<span id="cb6-13">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> q:</span>
<span id="cb6-14">        item.update({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"q"</span>: q})</span>
<span id="cb6-15">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">not</span> short:</span>
<span id="cb6-16">        item.update(</span>
<span id="cb6-17">            {<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"description"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"This is an amazing item that has a long description"</span>},</span>
<span id="cb6-18">        )</span>
<span id="cb6-19">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> item</span></code></pre></div>
<p>먼저 Path Operation 을 보면 <code>@app.get("/users/{user_id}/items/{item_id}")</code> 로 되어 있음</p>
<p>이를 통해 <code>user_id</code> 와 <code>item_id</code> 라는 Path Parameter 가 있음을 알 수 있음</p>
<p>Path Operation Function 의 parameter 를 보면, <code>user_id</code>, <code>item_id</code>, <code>q</code>, <code>short</code> 가 있음을 알 수 있음</p>
<p>Path Parameter 가 아닌 <code>q</code> 와 <code>short</code> 는 Query Parameter 임을 알 수 있고 각각 기본값이 <code>None</code>, <code>False</code> 임을 알 수 있음</p>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://fastapi.tiangolo.com/tutorial/">FastAPI 튜토리얼</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-07-MLOps-day9/index.html</guid>
  <pubDate>Wed, 06 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/110/200/150" medium="image"/>
</item>
<item>
  <title>머신러닝 시스템 설계 Ch.1</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-06-book-review-1/index.html</link>
  <description><![CDATA[ 



<section id="머신러닝-시스템이란" class="level2">
<h2 class="anchored" data-anchor-id="머신러닝-시스템이란">1. 머신러닝 시스템이란</h2>
<p>프로덕션 환경에서 알고리즘은 ML 시스템의 일부이다. 시스템은 ML 프로젝트의 출발점이 된 비즈니스 요구 사항, 사용자와 개발자가 시스템과 상호 작용하는 인터페이스, 데이터 스택, 모델을 개발 및 모니터링하고 업데이트하기 위한 로직은 물론 해당 로직을 전달할 수 있는 인프라를 포함한다.</p>
<ul>
<li><p>ML 시스템</p>
<ul>
<li><p>배포, 모니터링, 로직 업데이트</p></li>
<li><p>피처 엔지니어링, ML 알고리즘, Evaluation</p></li>
<li><p>데이터</p></li>
<li><p>인프라</p></li>
</ul></li>
</ul>
<p>이러한 ML 시스템과 ML 시스템 사용자, 비즈니스 요구 사항, ML 시스템 개발자 모두가 구성 요소이다.</p>
</section>
<section id="머신러닝을-사용해야-하는-경우" class="level2">
<h2 class="anchored" data-anchor-id="머신러닝을-사용해야-하는-경우">2. 머신러닝을 사용해야 하는 경우</h2>
<p>먼저 프로젝트를 시작하기 전에 ML이 과연 필요한지 생각해야 한다.</p>
<p>ML은 기존 데이터로 부터 복잡한 패턴을 학습하고 이러한 패턴을 사용해 본 적 없는 데이터에 대해 예측을 수행하는 접근법이다.</p>
<p>여기서 봐야하는 관점은 학습 가능한 점, 복잡한 패턴, 데이터(사용 가능한 데이터, 본 적 없는 데이터), 예측, 반복적, 비용, 대규모 이다.</p>
<section id="학습-시스템에-학습-능력이-있음" class="level4">
<h4 class="anchored" data-anchor-id="학습-시스템에-학습-능력이-있음">1. 학습: 시스템에 학습 능력이 있음</h4>
<p>흔히 알려진 관계형 데이터베이스는 학습 능력이 없기 때문에 ML 시스템이 아니다. ML 시스템이 학습을 하려면 학습할 대상이 있어야 한다. 대부분의 경우에는 데이터로 학습한다.</p>
<p>Ex) 지도 학습의 경우, ML 시스템은 한 쌍으로 이뤄진 입력과 출력 데이터를 이용해 입력 데이터에서 출력 데이터를 생성하는 관계를 학습한다.</p>
</section>
<section id="복잡한-패턴-학습할-패턴이-존재하며-복잡함" class="level4">
<h4 class="anchored" data-anchor-id="복잡한-패턴-학습할-패턴이-존재하며-복잡함">2. 복잡한 패턴: 학습할 패턴이 존재하며 복잡함</h4>
<p>ML 시스템은 학습할 패턴이 있는 경우에만 유용하다.</p>


</section>
</section>

 ]]></description>
  <category>books</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-06-book-review-1/index.html</guid>
  <pubDate>Mon, 04 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/109/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 8</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-02-MLOps-day8/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>MLflow 서버에 저장된 모델을 불러오는 스크립트 작성</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="모델-불러오기" class="level3">
<h3 class="anchored" data-anchor-id="모델-불러오기">1. 모델 불러오기</h3>
<p><code>day 7</code> 에서 작성한 코드로 학습된 모델을 서버로부터 불러오는 코드를 작성함</p>
<section id="환경-변수-설정" class="level4">
<h4 class="anchored" data-anchor-id="환경-변수-설정">1.1 환경 변수 설정</h4>
<p><code>day 7</code> 에서와 같이 MLflow 서버에 접근하기 위한 환경 변수 설정</p>
</section>
<section id="모델-불러오기-1" class="level4">
<h4 class="anchored" data-anchor-id="모델-불러오기-1">1.2 모델 불러오기</h4>
<p><code>sklearn</code> 모델 불러오기</p>
<p><code>mlflow.sklearn.load_model</code> 함수를 사용해서 저장된 모델을 불러옴</p>
<p><code>run_id</code> 와 모델을 저장할 때 설정했던 모델 이름을 받을 수 있도록 외부 변수 설정</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArgumentParser()</span>
<span id="cb1-2">parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--run-id"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run_id"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb1-3">parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--model-name"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_name"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sk_model"</span>)</span>
<span id="cb1-4">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span></code></pre></div>
<p>위에서 받은 변수를 이용해 <code>runs:/run_id/model_name</code> 의 형식으로 문자열을 만들어 줌</p>
<p><code>model_pipeline = mlflow.sklearn.load_model(f"runs:/{args.run_id}/{args.model_name}")</code></p>
<p>이 때, <code>pyfunc</code> 로도 모델을 불러올수있음</p>
<p><code>mlflow.pyfunc.load_model</code> 을 사용 -&gt; <code>mlflow.pyfunc.PyFuncModel</code> 클래스로 불러와짐</p>
<p><code>model_pipeline = mlflow.pyfunc.load_model(f"runs:/{args.run_id}/{args.model_name}")</code></p>
</section>
</section>
<section id="inference-코드를-작성하고-마무리하면-전체-코드는-다음과-같음" class="level3">
<h3 class="anchored" data-anchor-id="inference-코드를-작성하고-마무리하면-전체-코드는-다음과-같음">2. inference 코드를 작성하고 마무리하면 전체 코드는 다음과 같음</h3>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># load_model_from_registry.py</span></span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> argparse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ArgumentParser</span>
<span id="cb2-4"></span>
<span id="cb2-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb2-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb2-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0. set mlflow environments</span></span>
<span id="cb2-11">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_S3_ENDPOINT_URL"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9000"</span></span>
<span id="cb2-12">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_TRACKING_URI"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:5001"</span></span>
<span id="cb2-13">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_ACCESS_KEY_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minio"</span></span>
<span id="cb2-14">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_SECRET_ACCESS_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miniostorage"</span></span>
<span id="cb2-15"></span>
<span id="cb2-16"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. load model from mlflow</span></span>
<span id="cb2-17">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArgumentParser()</span>
<span id="cb2-18">parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--model-name"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_name"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sk_model"</span>)</span>
<span id="cb2-19">parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--run-id"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"run_id"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>)</span>
<span id="cb2-20">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb2-21"></span>
<span id="cb2-22">model_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.sklearn.load_model(<span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"runs:/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>run_id<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">/</span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>args<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>model_name<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">"</span>)</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. get data</span></span>
<span id="cb2-25">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>)</span>
<span id="cb2-26"></span>
<span id="cb2-27">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb2-28">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb2-29">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb2-30"></span>
<span id="cb2-31"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. predict results</span></span>
<span id="cb2-32">train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_train)</span>
<span id="cb2-33">valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_valid)</span>
<span id="cb2-34"></span>
<span id="cb2-35">train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_pred)</span>
<span id="cb2-36">valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_pred)</span>
<span id="cb2-37"></span>
<span id="cb2-38"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train Accuracy :"</span>, train_acc)</span>
<span id="cb2-39"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Valid Accuracy :"</span>, valid_acc)</span></code></pre></div>
</section>
<section id="실행-결과" class="level3">
<h3 class="anchored" data-anchor-id="실행-결과">3. 실행 결과</h3>
<p><code>localhost:5001</code> 에 접속하여 저장된 모델의 <code>run</code> 을 클릭하여 <code>run_id</code> 와 <code>model_name</code> 을 확인</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-02-MLOps-day8/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption"><code>run_id</code> 및 <code>model_name</code> 확인</figcaption>
</figure>
</div>
<p><code>python load_model_from_registry.py --model-name "sk_model" --run-id "RUN_ID"</code></p>
<p>에 값을 넣어서 실행</p>
<p>MLflow 서버의 metrics 를 확인하여 학습했던 결과와 같은지 확인</p>
<div class="quarto-layout-panel">
<div class="quarto-layout-row quarto-layout-valign-top">
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-02-MLOps-day8/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">MLflow 서버의 결과: train_acc = 0.975, valid_acc = 0.9</figcaption>
</figure>
</div>
</div>
<div class="quarto-layout-cell" style="flex-basis: 50.0%;justify-content: center;">
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-02-MLOps-day8/fig3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Local 환경의 결과: train_acc = 0.975, valid_acc = 0.9</figcaption>
</figure>
</div>
</div>
</div>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>
<p><a href="https://www.mlflow.org/docs/latest/models.html#storage-format">MLflow Storage Format</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-02-MLOps-day8/index.html</guid>
  <pubDate>Fri, 01 Dec 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/108/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 7</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-12-01-MLOps-day7/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>모델을 학습하고 MLflow 서버에 저장</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="save-model-to-registry" class="level3">
<h3 class="anchored" data-anchor-id="save-model-to-registry">1. Save Model to Registry</h3>
<p><code>day 5</code> 에서 작성한 <code>db_train.py</code> 코드의 <code>#3. save_model</code> 부분을 변경하여 모델을 업로드하는 코드 작성</p>
<section id="환경-변수-추가" class="level4">
<h4 class="anchored" data-anchor-id="환경-변수-추가">1.1 환경 변수 추가</h4>
<p>MLflow 와 통신하기 위해서는 몇 가지 환경 변수가 설정되어야 함</p>
<p>유저가 학습한 모델을 MLflow 서버를 통해 Arifact Store 인 MinIO 에 저장함</p>
<p>이 과정에서 MinIO 의 접근 권한이 필요함</p>
<p>이 접근 권한 정보는 <code>day 6</code> 에서 Docker Compose 파일의 <code>mlflow-server</code> 와 <code>mlflow-artifact-store</code> 의 정보임</p>
<p>따라서 아이디와 비밀번호를 사전에 정의된 시스템 환경 변수에 설정해야 MinIO 에 접근할 수 있음</p>
<p>추가로 MLflow 서버와 S3(MinIO) 의 URI 도 함께 설정해야함</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb1-2"></span>
<span id="cb1-3">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_S3_ENDPOINT_URL"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9000"</span></span>
<span id="cb1-4">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_TRACKING_URI"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:5001"</span></span>
<span id="cb1-5">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_ACCESS_KEY_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minio"</span></span>
<span id="cb1-6">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_SECRET_ACCESS_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miniostorage"</span></span></code></pre></div>
<ul>
<li><em>MLFLOW_S3_ENDPOINT_URL</em> : 모델을 저장할 스토리지 주소</li>
<li><em>MLFLOW_TRACKING_URI</em> : 정보를 저장하기 위해 연결할 MLflow 서버의 수조</li>
<li><em>AWS_ACCESS_KEY_ID</em> : MinIO 에 접근하기 위한 아이디</li>
<li><em>AWS_SECRET_ACCESS_KEY</em> : MinIO 에 접근하기 위한 비밀번호</li>
</ul>
</section>
<section id="모델-저장하기" class="level4">
<h4 class="anchored" data-anchor-id="모델-저장하기">1.2 모델 저장하기</h4>
<p>MLflow 의 정보를 저장하기 위해 <code>experiment</code> 와 <code>run</code> 을 사용함</p>
<ul>
<li><code>experiment</code> : MLflow 에서 정보를 관리하기 위해 나누는 일종의 directory, 생성하지 않는 경우 <code>Default</code>로 저장됨</li>
<li><code>run</code> : <code>experiment</code> 에 저장되는 모델 실험 결과, 해당 <code>run</code> 에 실제 정보들이 저장되며 <code>experiment/run</code> 의 구조로 저장됨</li>
</ul>
<p><code>mlflow</code> 클래스를 이용하여 다음과 같이 코드를 작성함</p>
<p><code>parser</code> 를 활용하여 <code>model_name</code> 인자를 받아주고 <code>experiment</code> 는 <code>mlflow.set_experiment("new-exp")</code> 를 이용하여 이름을 정해줌</p>
<p><code>run</code> 을 담당하는 코드는 다음과 같음</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb2-2">    mlflow.log_metrics({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_acc"</span>: train_acc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valid_acc"</span>: valid_acc})</span>
<span id="cb2-3">    mlflow.sklearn.log_model(</span>
<span id="cb2-4">        sk_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_pipeline,</span>
<span id="cb2-5">        artifact_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>args.model_name,</span>
<span id="cb2-6">        signature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signature,</span>
<span id="cb2-7">        input_example<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_sample,</span>
<span id="cb2-8">    )</span></code></pre></div>
<ul>
<li><em>mlflow.log_metrics</em> : 모델의 결과 metrics 를 Python 의 dictionary 형태로 입력해 생성된 <code>run</code> 을 저장</li>
<li><em>mlflow.sklearn.log_model</em> : <code>sklearn</code> 모델은 <code>mlflow.sklearn</code> 를 사용해 간편하게 업로드가 가능함</li>
</ul>
<p>모델은 다음과 같은 구조로 저장됨</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># Directory written by mlflow.sklearn.save_model(model, "sk_model")</span></span>
<span id="cb3-2"></span>
<span id="cb3-3">sk_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">/</span></span>
<span id="cb3-4">├── MLmodel</span>
<span id="cb3-5">├── model.pkl</span>
<span id="cb3-6">├── conda.yaml</span>
<span id="cb3-7">├── python_env.yaml</span>
<span id="cb3-8">└── requirements.txt</span></code></pre></div>
</section>
</section>
<section id="전체-코드" class="level3">
<h3 class="anchored" data-anchor-id="전체-코드">2. 전체 코드</h3>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># save_model_to_registry.py</span></span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> os</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> argparse <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> ArgumentParser</span>
<span id="cb4-4"></span>
<span id="cb4-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> mlflow</span>
<span id="cb4-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb4-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb4-9"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb4-10"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb4-11"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb4-12"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb4-13"></span>
<span id="cb4-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 0. set mlflow environments</span></span>
<span id="cb4-15">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_S3_ENDPOINT_URL"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9000"</span></span>
<span id="cb4-16">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"MLFLOW_TRACKING_URI"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:5001"</span></span>
<span id="cb4-17">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_ACCESS_KEY_ID"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"minio"</span></span>
<span id="cb4-18">os.environ[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"AWS_SECRET_ACCESS_KEY"</span>] <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"miniostorage"</span></span>
<span id="cb4-19"></span>
<span id="cb4-20"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. get data</span></span>
<span id="cb4-21">db_connect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb4-22">    user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span>,</span>
<span id="cb4-23">    password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypassword"</span>,</span>
<span id="cb4-24">    host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>,</span>
<span id="cb4-25">    port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb4-26">    database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span>,</span>
<span id="cb4-27">)</span>
<span id="cb4-28">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM iris_data ORDER BY id DESC LIMIT 100"</span>, db_connect)</span>
<span id="cb4-29"></span>
<span id="cb4-30">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb4-31">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb4-32">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb4-33"></span>
<span id="cb4-34"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. model development and train</span></span>
<span id="cb4-35">model_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span>, StandardScaler()), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svc"</span>, SVC())])</span>
<span id="cb4-36">model_pipeline.fit(X_train, y_train)</span>
<span id="cb4-37"></span>
<span id="cb4-38">train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_train)</span>
<span id="cb4-39">valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_valid)</span>
<span id="cb4-40"></span>
<span id="cb4-41">train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_pred)</span>
<span id="cb4-42">valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_pred)</span>
<span id="cb4-43"></span>
<span id="cb4-44"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train Accuracy :"</span>, train_acc)</span>
<span id="cb4-45"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Valid Accuracy :"</span>, valid_acc)</span>
<span id="cb4-46"></span>
<span id="cb4-47"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. save model</span></span>
<span id="cb4-48">parser <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> ArgumentParser()</span>
<span id="cb4-49">parser.add_argument(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--model-name"</span>, dest<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"model_name"</span>, <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">type</span><span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">str</span>, default<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sk_model"</span>)</span>
<span id="cb4-50">args <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> parser.parse_args()</span>
<span id="cb4-51"></span>
<span id="cb4-52">mlflow.set_experiment(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"new-exp"</span>)</span>
<span id="cb4-53"></span>
<span id="cb4-54">signature <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> mlflow.models.signature.infer_signature(model_input<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>X_train, model_output<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_pred)</span>
<span id="cb4-55">input_sample <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> X_train.iloc[:<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">10</span>]</span>
<span id="cb4-56"></span>
<span id="cb4-57"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> mlflow.start_run():</span>
<span id="cb4-58">    mlflow.log_metrics({<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"train_acc"</span>: train_acc, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valid_acc"</span>: valid_acc})</span>
<span id="cb4-59">    mlflow.sklearn.log_model(</span>
<span id="cb4-60">        sk_model<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>model_pipeline,</span>
<span id="cb4-61">        artifact_path<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>args.model_name,</span>
<span id="cb4-62">        signature<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>signature,</span>
<span id="cb4-63">        input_example<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>input_sample,</span>
<span id="cb4-64">    )</span>
<span id="cb4-65"></span>
<span id="cb4-66"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. save data</span></span>
<span id="cb4-67">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<p>실행코드 : <code>python save_model_to_registry.py --model-name "sk_model"</code></p>
<p>실행 결과는 다음과 같음</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-12-01-MLOps-day7/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">모델 저장 결과 상세</figcaption>
</figure>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-12-01-MLOps-day7/index.html</guid>
  <pubDate>Thu, 30 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/107/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 6</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-29-MLOps-day6/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li>Docker Compose 를 이용하여 MLflow 서버를 구축 및 띄움</li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="mlflow-backend-store" class="level3">
<h3 class="anchored" data-anchor-id="mlflow-backend-store">1. MLflow Backend Store</h3>
<p><strong>Backend Store</strong> 란 수치 데이터와 MLflow 서버의 정보들을 체계적으로 관리하기 위한 DB 이다. Backend store 에는 모델의 학습 결과인 accuracy, f1-score, loss, hyperparameter 등의 수치 데이터와 run_id, run_name, experiment_name 등의 MLflow의 meta-data 가 저장된다.</p>
<p>Backend Store 로 사용하기 위해 PostgreSQL DB 를 새롭게 생성</p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb1-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow-backend-store</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres:14.0</span></span>
<span id="cb1-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow-backend-store</span></span>
<span id="cb1-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_USER</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflowuser</span></span>
<span id="cb1-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_PASSWORD</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflowpassword</span></span>
<span id="cb1-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_DB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflowdatabase</span></span>
<span id="cb1-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb1-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMD"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pg_isready"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-q"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-U"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mlflowuser"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-d"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mlflowdatabase"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb1-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 10s</span></span>
<span id="cb1-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb1-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">retries</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span></code></pre></div>
</section>
<section id="mlflow-artifact-store" class="level3">
<h3 class="anchored" data-anchor-id="mlflow-artifact-store">2. MLflow Artifact Store</h3>
<p><strong>Artifact Store</strong> 란 MLflow 에서 학습된 모델을 저장하는 Model Registry 로써 이용하기 위한 storage server 이다. 이를 이용하면 기본적인 파일 시스템 보다 체계적으로 관리 할 수 있으며 외부에 있는 storage server 도 사용 할 수 있다는 장점이 있다.</p>
<p>Artifact store 로 <strong>MinIO</strong> 서버를 사용한다.</p>
<ul>
<li><p>MinIO 는 S3 를 대체할 수 있는 오픈 소스 개체 스토리지이다.</p></li>
<li><p>AWS S3 의 API 와도 호환이 가능해서 SDK도 동일하게 사용 가능하다.</p></li>
<li><p>MLflow 에서는 AWS S3 를 모델을 저장하기 위한 스토리지로 사용하도록 권장하고 있다.</p></li>
<li><p>실습에서 AWS credential 을 통해 MinIO 대신 AWS S3 를 사용해도 같은 결과를 얻을 수 있다.</p></li>
</ul>
<p>MinIO 의 스펙을 Compose 파일에 서비스 이름, 유저 이름, 비밀번호를 환경변수로 정의하고 호스트와 연결되는 포트 또한 정의</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb2-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb2-2"></span>
<span id="cb2-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow-artifact-store</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> minio/minio</span></span>
<span id="cb2-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow-artifact-store</span></span>
<span id="cb2-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 9000:9000</span></span>
<span id="cb2-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 9001:9001</span></span>
<span id="cb2-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MINIO_ROOT_USER</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> minio</span></span>
<span id="cb2-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MINIO_ROOT_PASSWORD</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> miniostorage</span></span>
<span id="cb2-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> server /data/minio --console-address :9001</span></span>
<span id="cb2-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb2-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMD"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"curl"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-f"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"http://localhost:9000/minio/health/live"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb2-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 30s</span></span>
<span id="cb2-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 20s</span></span>
<span id="cb2-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">retries</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">3</span></span></code></pre></div>
</section>
<section id="mlflow-server" class="level3">
<h3 class="anchored" data-anchor-id="mlflow-server">3. MLflow Server</h3>
<p>위에서 만든 Backend Store와 Artifact Store에 접근 가능한 MLflow서버 생성</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb3-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> amd64/python:3.9-slim</span>
<span id="cb3-2"></span>
<span id="cb3-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-4">    git <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-5">    wget <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-6">    <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">rm</span> <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-rf</span> /var/lib/apt/lists/<span class="pp" style="color: #AD0000;
background-color: null;
font-style: inherit;">*</span></span>
<span id="cb3-7"></span>
<span id="cb3-8"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> pip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span><span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-9">    <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install mlflow psycopg2-binary boto3</span>
<span id="cb3-10"></span>
<span id="cb3-11"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="bu" style="color: null;
background-color: null;
font-style: inherit;">cd</span> /tmp <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-12">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">wget</span> https://dl.min.io/client/mc/release/linux-amd64/mc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-13">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">chmod</span> +x mc <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\</span></span>
<span id="cb3-14">    <span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mv</span> mc /usr/bin/mc</span></code></pre></div>
<p>작성된 Dockerfile 을 build 하도록 Compose 파일의 <code>service</code> 탭 밑에 정의</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb4-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb4-2"></span>
<span id="cb4-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">  </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb4-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Dockerfile</span></span>
<span id="cb4-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mlflow-server</span></span>
<span id="cb4-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow-backend-store</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> service_healthy</span></span>
<span id="cb4-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">mlflow-artifact-store</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-13"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> service_healthy</span></span>
<span id="cb4-14"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-15"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5001:5000</span></span>
<span id="cb4-16"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-17"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AWS_ACCESS_KEY_ID</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> minio</span></span>
<span id="cb4-18"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">AWS_SECRET_ACCESS_KEY</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> miniostorage</span></span>
<span id="cb4-19"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">MLFLOW_S3_ENDPOINT_URL</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> http://mlflow-artifact-store:9000</span></span>
<span id="cb4-20"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb4-21"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> /bin/sh</span></span>
<span id="cb4-22"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">      </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> -c</span></span>
<span id="cb4-23"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">      - </span><span class="ch" style="color: #20794D;
background-color: null;
font-style: inherit;">|</span></span>
<span id="cb4-24">        mc config host add mlflowminio http://mlflow-artifact-store:9000 minio miniostorage &amp;&amp;</span>
<span id="cb4-25">        mc mb --ignore-existing mlflowminio/mlflow</span>
<span id="cb4-26">        mlflow server \</span>
<span id="cb4-27">        --backend-store-uri postgresql://mlflowuser:mlflowpassword@mlflow-backend-store/mlflowdatabase \</span>
<span id="cb4-28">        --default-artifact-root s3://mlflow/ \</span>
<span id="cb4-29">        --host 0.0.0.0</span></code></pre></div>
<ul>
<li>MinIO 에 접근하기 위한 계정 정보를 환경변수로 설정</li>
<li>모델을 저장할 때 사용할 MinIO 초기 버켓 생성</li>
<li>MLflow 서버를 끠우는 명령어 작성
<ul>
<li>PostgreSQL DB 에 연결하기 위한 keyword argument 추가</li>
<li>MinIO 에 연결하기 위한 keyword argument 추가</li>
</ul></li>
</ul>
<p>-&gt; Compose 를 띄우면 <code>localhost:5001</code> 을 통해 MLflow 서버에 접속이 가능하고 <code>localhost:9001</code> 을 통해 MinIO 서버에 접속이 가능하다.</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-29-MLOps-day6/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">MLflow 접속화면</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-29-MLOps-day6/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">Minio 접속화면</figcaption>
</figure>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-29-MLOps-day6/index.html</guid>
  <pubDate>Tue, 28 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/106/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 5</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-28-MLOps-day5/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>DB에서 데이터를 가져오는 파이프라인 작성</p></li>
<li><p>이를 활용한 모델 스크립트 작성</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="load-data" class="level3">
<h3 class="anchored" data-anchor-id="load-data">1. Load Data</h3>
<p><strong>데이터를 추출하는 쿼리문</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">SELECT</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">*</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> iris_data <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ORDER</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">BY</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">id</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">DESC</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">LIMIT</span> <span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">100</span>;</span></code></pre></div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-28-MLOps-day5/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">실행결과</figcaption>
</figure>
</div>
<p>-&gt; <code>id</code> column 을 기준으로 최신 데이터 100개를 추출하는 쿼리</p>
<p><strong>Pandas를 이용한 데이터 받아오기</strong></p>
<p><code>pandas.read_sql</code> 은 입력 argument 로 query 와 DB connector 를 받음</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb2-3"></span>
<span id="cb2-4">db_connect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>, database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span>, user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span>, password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypassword"</span>)</span>
<span id="cb2-5">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM iris_data ORDER BY id DESC LIMIT 100"</span>, db_connect)</span></code></pre></div>
<p>-&gt; 확인해보면 <code>df</code> 에 데이터가 쌓여있음</p>
<p><strong>모델 학습에 필요한 <code>X</code>와 <code>y</code>를 정의</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb3-2"></span>
<span id="cb3-3">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb3-4">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb3-5"></span>
<span id="cb3-6">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span></code></pre></div>
</section>
<section id="save-data" class="level3">
<h3 class="anchored" data-anchor-id="save-data">2. Save Data</h3>
<p>DB에 계속 데이터가 쌓이고 있으므로 데이터를 불러올 때마다 데이터가 변경됨. 따라서 Validation 용 데이터를 위해 따로 저장이 필요함</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"valid_data.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
</section>
<section id="전체-코드" class="level3">
<h3 class="anchored" data-anchor-id="전체-코드">3. 전체 코드</h3>
<p><strong>Train</strong></p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb5-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb5-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb5-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb5-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb5-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb5-7"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb5-8"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb5-9"></span>
<span id="cb5-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. get data</span></span>
<span id="cb5-11">db_connect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>, database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span>, user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span>, password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypassword"</span>)</span>
<span id="cb5-12">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_sql(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"SELECT * FROM iris_data ORDER BY id DESC LIMIT 100"</span>, db_connect)</span>
<span id="cb5-13">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb5-14">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb5-15">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb5-16"></span>
<span id="cb5-17"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. model development and train</span></span>
<span id="cb5-18">model_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span>, StandardScaler()), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svc"</span>, SVC())])</span>
<span id="cb5-19">model_pipeline.fit(X_train, y_train)</span>
<span id="cb5-20"></span>
<span id="cb5-21">train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_train)</span>
<span id="cb5-22">valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> model_pipeline.predict(X_valid)</span>
<span id="cb5-23"></span>
<span id="cb5-24">train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_pred)</span>
<span id="cb5-25">valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_pred)</span>
<span id="cb5-26"></span>
<span id="cb5-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train Accuracy :"</span>, train_acc)</span>
<span id="cb5-28"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Valid Accuracy :"</span>, valid_acc)</span>
<span id="cb5-29"></span>
<span id="cb5-30"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. save model</span></span>
<span id="cb5-31">joblib.dump(model_pipeline, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db_pipeline.joblib"</span>)</span>
<span id="cb5-32"></span>
<span id="cb5-33"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 4. save data</span></span>
<span id="cb5-34">df.to_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>, index<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">False</span>)</span></code></pre></div>
<p><strong>Validation</strong></p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb6-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb6-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb6-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb6-5"></span>
<span id="cb6-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. reproduce data</span></span>
<span id="cb6-7">df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.read_csv(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data.csv"</span>)</span>
<span id="cb6-8">X <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.drop([<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"id"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"timestamp"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb6-9">y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df[<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"target"</span>]</span>
<span id="cb6-10">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb6-11"></span>
<span id="cb6-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. load model</span></span>
<span id="cb6-13">pipeline_load <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"db_pipeline.joblib"</span>)</span>
<span id="cb6-14"></span>
<span id="cb6-15"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. validate</span></span>
<span id="cb6-16">load_train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline_load.predict(X_train)</span>
<span id="cb6-17">load_valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pipeline_load.predict(X_valid)</span>
<span id="cb6-18"></span>
<span id="cb6-19">load_train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_train_pred)</span>
<span id="cb6-20">load_valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_valid_pred)</span>
<span id="cb6-21"></span>
<span id="cb6-22"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Load Model Train Accuracy :"</span>, load_train_acc)</span>
<span id="cb6-23"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Load Model Valid Accuracy :"</span>, load_valid_acc)</span></code></pre></div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-28-MLOps-day5/index.html</guid>
  <pubDate>Mon, 27 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/104/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 4</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-26-MLOps-day4/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>기본적인 모델 학습 및 저장</p></li>
<li><p>모델 파이프라인 작성</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="base-model-코드-작성" class="level3">
<h3 class="anchored" data-anchor-id="base-model-코드-작성">1. Base Model 코드 작성</h3>
<p>데이터: <code>Iris</code></p>
<p>데이터 스케일링: <code>StandardScaler</code></p>
<p>모델: <code>SVC</code></p>
<p>정확도 metric: <code>accuracy_score</code></p>
<p>모델 저장 방법: <code>joblib</code></p>
<p>전체 코드는 아래와 같음</p>
<p><strong>Train 코드</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb1-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb1-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb1-5"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb1-6"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb1-7"></span>
<span id="cb1-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. get data</span></span>
<span id="cb1-9">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris(return_X_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-10">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. model development and train</span></span>
<span id="cb1-13">scaler <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> StandardScaler()</span>
<span id="cb1-14">classifier <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> SVC()</span>
<span id="cb1-15"></span>
<span id="cb1-16">scaled_X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.fit_transform(X_train)</span>
<span id="cb1-17">scaled_X_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler.transform(X_valid)</span>
<span id="cb1-18">classifier.fit(scaled_X_train, y_train)</span>
<span id="cb1-19"></span>
<span id="cb1-20">train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier.predict(scaled_X_train)</span>
<span id="cb1-21">valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier.predict(scaled_X_valid)</span>
<span id="cb1-22"></span>
<span id="cb1-23">train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>train_pred)</span>
<span id="cb1-24">valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>valid_pred)</span>
<span id="cb1-25"></span>
<span id="cb1-26"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Train Accuracy :"</span>, train_acc)</span>
<span id="cb1-27"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Valid Accuracy :"</span>, valid_acc)</span>
<span id="cb1-28"></span>
<span id="cb1-29"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. save model</span></span>
<span id="cb1-30">joblib.dump(scaler, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler.joblib"</span>)</span>
<span id="cb1-31">joblib.dump(classifier, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier.joblib"</span>)</span></code></pre></div>
<p><strong>Validate 코드</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb2-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> joblib</span>
<span id="cb2-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb2-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.metrics <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> accuracy_score</span>
<span id="cb2-4"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.model_selection <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> train_test_split</span>
<span id="cb2-5"></span>
<span id="cb2-6"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 1. reproduce data</span></span>
<span id="cb2-7">X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris(return_X_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb2-8">X_train, X_valid, y_train, y_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> train_test_split(X, y, train_size<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="fl" style="color: #AD0000;
background-color: null;
font-style: inherit;">0.8</span>, random_state<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">2022</span>)</span>
<span id="cb2-9"></span>
<span id="cb2-10"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 2. load model</span></span>
<span id="cb2-11">scaler_load <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler.joblib"</span>)</span>
<span id="cb2-12">classifier_load <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> joblib.load(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"classifier.joblib"</span>)</span>
<span id="cb2-13"></span>
<span id="cb2-14"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;"># 3. validate</span></span>
<span id="cb2-15">scaled_X_train <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_load.transform(X_train)</span>
<span id="cb2-16">scaled_X_valid <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> scaler_load.transform(X_valid)</span>
<span id="cb2-17"></span>
<span id="cb2-18">load_train_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier_load.predict(scaled_X_train)</span>
<span id="cb2-19">load_valid_pred <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> classifier_load.predict(scaled_X_valid)</span>
<span id="cb2-20"></span>
<span id="cb2-21">load_train_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_train, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_train_pred)</span>
<span id="cb2-22">load_valid_acc <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> accuracy_score(y_true<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>y_valid, y_pred<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>load_valid_pred)</span>
<span id="cb2-23"></span>
<span id="cb2-24"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Load Model Train Accuracy :"</span>, load_train_acc)</span>
<span id="cb2-25"><span class="bu" style="color: null;
background-color: null;
font-style: inherit;">print</span>(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"Load Model Valid Accuracy :"</span>, load_valid_acc)</span></code></pre></div>
<p>-&gt; <code>joblib</code>의 load를 통해 학습한 모델을 불러옴</p>
</section>
<section id="model-pipeline-작성" class="level3">
<h3 class="anchored" data-anchor-id="model-pipeline-작성">2. Model Pipeline 작성</h3>
<p><strong>위에서 사용했던 모델인 <code>scaler</code>와 <code>SVC</code>를 통합</strong></p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.preprocessing <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> StandardScaler</span>
<span id="cb3-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.pipeline <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> Pipeline</span>
<span id="cb3-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.svm <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> SVC</span>
<span id="cb3-4"></span>
<span id="cb3-5">model_pipeline <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> Pipeline([(<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"scaler"</span>, StandardScaler()), (<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"svc"</span>, SVC())])</span></code></pre></div>
<p>-&gt; 이 코드를 활용하여 앞의 부분을 대체</p>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-26-MLOps-day4/index.html</guid>
  <pubDate>Sun, 26 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/103/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 3</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-25-MLOps-day3/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>앞의 코드를 Docker 에서 활용하기 위해 Dockerfile 작성</p></li>
<li><p>Docker 컨테이너 간의 네트워크를 연결하여 DB 에 데이터 삽입</p></li>
<li><p>DB 컨테이너와 데이터 생성 컨테이너를 묶는 Docker Compose 파일 작성</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="data-generator-on-docker" class="level3">
<h3 class="anchored" data-anchor-id="data-generator-on-docker">1. Data Generator on Docker</h3>
<p><strong>앞에서 만들었던 데이터 생성 코드(<code>data_generator.py</code>로 부를 예정)를 활용</strong></p>
<ul>
<li><p>코드 실행 순서</p>
<ol type="1">
<li><p>DB에 연결하는 connector 생성</p></li>
<li><p>연결된 DB에 <code>iris_data</code> 테이블 생성</p></li>
<li><p>Iris 데이터 불러오기</p></li>
<li><p>불러온 데이터 중 랜덤으로 row 1개를 DB에 삽입</p></li>
<li><p>4번을 계속해서 반복</p></li>
</ol></li>
</ul>
<p><strong>Dockerfile 작성</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode dockerfile code-with-copy"><code class="sourceCode dockerfile"><span id="cb1-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">FROM</span> amd64/python:3.9-slim</span>
<span id="cb1-2"></span>
<span id="cb1-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> update <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">apt-get</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-y</span> <span class="dt" style="color: #AD0000;
background-color: null;
font-style: inherit;">\ </span></span>
<span id="cb1-4">    postgresql-client \ </span>
<span id="cb1-5">    &amp;&amp; rm -rf /var/lib/apt/lists/*</span>
<span id="cb1-6"></span>
<span id="cb1-7"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">WORKDIR</span> /usr/app</span>
<span id="cb1-8"></span>
<span id="cb1-9"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">RUN</span> <span class="ex" style="color: null;
background-color: null;
font-style: inherit;">pip</span> install <span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">-U</span> pip <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">&amp;&amp;</span><span class="ex" style="color: null;
background-color: null;
font-style: inherit;">\ </span></span>
<span id="cb1-10">    pip install scikit-learn pandas psycopg2-binary</span>
<span id="cb1-11"></span>
<span id="cb1-12"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">COPY</span> data_generator.py data_generator.py</span>
<span id="cb1-13"></span>
<span id="cb1-14"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">ENTRYPOINT</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"python"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"data_generator.py"</span>, <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"--db-host"</span>]</span>
<span id="cb1-15"></span>
<span id="cb1-16"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CMD</span> [<span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>]</span></code></pre></div>
<ul>
<li><em>from</em> : 이미지를 만들 때 base 가 되는 이미지 지정</li>
<li><em>RUN</em> : 이미지를 만들 때 실행할 코드를 지정, 첫 번째 <code>RUN</code> 에서는 해당 Dockerfile 을 이용하여 컨테이너에 접근하여 <code>psql</code> 을 사용하기 위해 <code>postgresql-client</code> 을 설치</li>
<li><em>WORKDIR</em> : 작업 directory 지정</li>
<li><em>RUN</em> : 두 번째 <code>RUN</code> 에서는 컨테이너에서 python 스크립트를 실행할 때 필요한 패키지 설치</li>
<li><em>COPY</em> : <code>WORKDIR</code> 로 지정한 directory 를 기준으로 파일이나 폴더를 이미지에 복사</li>
<li><em>ENTRYPOINT</em> : 컨테이너가 실행될 때 시작할 프로세스를 입력</li>
<li><em>CMD</em> : 컨테이너가 실행될 때 <code>ENTRYPOINT</code> 에 전달할 argument 를 입력</li>
</ul>
<p><strong>Docker build</strong></p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">$ docker build <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">OPTIONS</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> PATH | URL | -</span></code></pre></div>
<p>-&gt; 이 명령어를 통해 dockerfile 을 기준으로 이미지를 생성</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb3-1">$ docker run <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docker image name</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>-&gt; build 한 이미지 실행</p>
<p>하지만 port 및 TCP/IP 관련 에러가 뜨는데 이는 local 과 DB container 는 연결되어 있지만 <code>Data Generator</code> 과 DB Container 가 연결되어 있지 않음</p>
<p>이를 해결하기 위해 컨테이너 간 통신할 수 있도록 네트워크를 생성해야 함</p>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-25-MLOps-day3/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">에러 발생 예시</figcaption>
</figure>
</div>
</section>
<section id="네트워크-연결" class="level3">
<h3 class="anchored" data-anchor-id="네트워크-연결">2. 네트워크 연결</h3>
<p><strong><code>docker network</code> 사용</strong></p>
<p>네트워크 정의 및 생성</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb4-1">$ docker network create <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">network-name</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p>실행 중인 DB 컨테이너를 생성된 네트워크에 연결</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb5-1">$ docker network connect <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">network-name</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">] [DB container name]</span></span></code></pre></div>
<ul>
<li><p>EX)</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb6-1">$ docker network connect my-network postgres-server</span></code></pre></div></li>
</ul>
<p>네트워크 삭제</p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb7-1">$ docker network rm <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">network-name</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<p><strong>docker 재 실행</strong></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb8-1">$ docker run -d \</span>
<span id="cb8-2">    --name <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">docker image name</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> \ </span>
<span id="cb8-3">    --network <span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">[</span><span class="ot" style="color: #003B4F;
background-color: null;
font-style: inherit;">"network-name"</span><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">]</span> \ </span></code></pre></div>
<ul>
<li><p>EX)</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb9-1">$ docker run -d \ </span>
<span id="cb9-2">    --name data-generator \ </span>
<span id="cb9-3">    --network "my-network" \ </span>
<span id="cb9-4">    data-generator "postgres-server"</span></code></pre></div></li>
</ul>
<p>-&gt; <code>psql</code> 을 이용하여 DB에 접속해서 확인해보면 추가되는 것을 확인할 수 있음</p>
</section>
<section id="docker-compose" class="level3">
<h3 class="anchored" data-anchor-id="docker-compose">3. Docker Compose</h3>
<p><strong>Compose 파일의 아키텍처</strong></p>
<div class="sourceCode" id="cb10" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb10-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb10-2"></span>
<span id="cb10-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">postgres-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        ...</span></span>
<span id="cb10-6"></span>
<span id="cb10-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data-generator</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb10-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        ...</span></span></code></pre></div>
<ul>
<li><em>version</em> : Compose 파일의 버전</li>
<li><em>services</em> : Compose 에 묶일 서비스들을 의미</li>
</ul>
<p><strong>Postgres server service</strong></p>
<div class="sourceCode" id="cb11" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb11-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb11-2"></span>
<span id="cb11-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">postgres-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">image</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres:14.0</span></span>
<span id="cb11-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres-server</span></span>
<span id="cb11-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">ports</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5432:5432</span></span>
<span id="cb11-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">environment</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb11-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_USER</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> myuser</span></span>
<span id="cb11-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_PASSWORD</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mypassword</span></span>
<span id="cb11-12"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">POSTGRES_DB</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> mydatabase</span></span></code></pre></div>
<ul>
<li><em>postgres-server</em> : 서비스의 이름, 실행되는 컨테이너 호스트의 이름</li>
<li><em>ports</em> : 컨테이너에서 외부로 노출할 포트 포워딩을 설정, <code>host:container</code> 형식으로 사용되고 여러 개 지정 가능</li>
<li><em>environment</em> : 컨테이너를 실행할 때 사용한 <code>-e</code> 옵션과 같은 역할</li>
</ul>
<p><strong>Data generator service</strong></p>
<div class="sourceCode" id="cb12" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb12-1"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">version</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"3"</span></span>
<span id="cb12-2"></span>
<span id="cb12-3"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">services</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">data-generator</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">build</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">context</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> .</span></span>
<span id="cb12-7"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">dockerfile</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> Dockerfile</span></span>
<span id="cb12-8"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">container_name</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> data-generator</span></span>
<span id="cb12-9"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb12-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">            </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">-</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> postgres_server</span></span>
<span id="cb12-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">command</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"postgres-server"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span></code></pre></div>
<ul>
<li><em>build</em> :
<ul>
<li><em>context</em> : 이미지를 build 하기 위해 dockerfile 이 있는 절대경로 및 상대경로 설정</li>
<li><em>dockerfile</em> : <em>context</em> 에서 설정한 경로에 있는 dockerfile 의 파일명 입력</li>
</ul></li>
<li><em>depends_on</em> : Compose 로 띄워지는 서비스 간의 종속성 순서대로 서비스를 시작할 때 사용</li>
<li><em>command</em> : Dockerfile 에 작성되어 있는 <code>CMD</code> 를 덮어씀</li>
</ul>
<p>위에서 작성한 코드를 하나의 파일로 합쳐 만들고 실행</p>
<div class="sourceCode" id="cb13" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb13-1">$ docker compose up -d</span></code></pre></div>
<ul>
<li><em>-d</em> : Detached 모드(백그라운드에서 컨테이를 실행 후 유지)로 실행</li>
</ul>
<p>하지만 <code>docker ps</code> 를 입력해보면 postgres server 만 띄워져있음</p>
<p><code>depends on</code> 으로 서비스 간의 종속성은 정해졌지만, 실제로 postgres-server 가 띄워진 뒤에 곧바로 data-generator 가 띄워짐</p>
<p>postgres-server 의 준비가 되지 않은 상태로 data-generator 가 DB 와 연결을 하려다 보니 Exited 문제가 발생</p>
<p>-&gt; 이를 해결하기 위해 <code>healthcheck</code> 와 <code>condition</code> 을 추가</p>
<p><strong><code>healthcheck</code> 와 <code>condition</code> 추가하기</strong></p>
<div class="sourceCode" id="cb14" style="background: #f1f3f5;"><pre class="sourceCode yaml code-with-copy"><code class="sourceCode yaml"><span id="cb14-1"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### postgres-server에 추가</span></span>
<span id="cb14-2"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">healthcheck</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-3"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">test</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">[</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"CMD"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"pg_isready"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-q"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-U"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"-d"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">,</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">]</span></span>
<span id="cb14-4"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">interval</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 10s</span></span>
<span id="cb14-5"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">timeout</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> 5s</span></span>
<span id="cb14-6"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">retries</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5</span></span>
<span id="cb14-7"></span>
<span id="cb14-8"><span class="co" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">### data-generator에 추가</span></span>
<span id="cb14-9"><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">depends_on</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> </span></span>
<span id="cb14-10"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">    </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">postgres-server</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span></span>
<span id="cb14-11"><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;">        </span><span class="fu" style="color: #4758AB;
background-color: null;
font-style: inherit;">condition</span><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">:</span><span class="at" style="color: #657422;
background-color: null;
font-style: inherit;"> service_healthy</span></span></code></pre></div>
<ul>
<li><em>test</em> : 테스트 할 명령어 입력</li>
<li><em>interval</em> : Healthcheck 의 간격 설정</li>
<li><em>timeout</em> : Healthcheck 의 timeout 을 설정</li>
<li><em>retries</em> : Timeout 의 횟수 설정</li>
<li><em>condition</em> : Healthcheck 기능을 사용하기 위해 <em>depends_on</em> 의 parameter 로 <code>condition: service_healthy</code> 를 넣어줌</li>
</ul>
<p>이후 서비스를 다시 실행하면 문제 없이 실행이 가능</p>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-25-MLOps-day3/index.html</guid>
  <pubDate>Sat, 25 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/102/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 2</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-24-MLOps-day2/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>생성한 테이블에 iris 데이터 삽입</p></li>
<li><p>자동으로 삽입해주는 스크립트 작성</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="데이터-삽입" class="level3">
<h3 class="anchored" data-anchor-id="데이터-삽입">1. 데이터 삽입</h3>
<p><strong><code>scikit-learn</code> 패키지의 <code>load_iris</code> 를 삽입하기 위해 앞에서 생성한 테이블의 columns 이름과 일치하도록 수정</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb1-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb1-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb1-3"></span>
<span id="cb1-4"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_data():</span>
<span id="cb1-5">    X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris(return_X_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb1-6">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([X, y], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb1-7">    rename_rule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb1-8">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal length (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_length"</span>,</span>
<span id="cb1-9">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal width (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_width"</span>,</span>
<span id="cb1-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal length (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_length"</span>,</span>
<span id="cb1-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal width (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_width"</span>,</span>
<span id="cb1-12">    }</span>
<span id="cb1-13">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rename_rule)</span>
<span id="cb1-14">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span></code></pre></div>
<p><strong>Data Insertion Query 작성</strong></p>
<p>DB 에 데이터를 삽입하는 query 의 포맷은 다음과 같음</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb2-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INSERT</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">INTO</span> {table_name} (col_1, col_2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.) <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">VALUES</span> (val_1, val_2, <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.)</span></code></pre></div>
<p>이를 이해하고 query를 작성</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1">insert_row_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb3-2"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">INSERT INTO iris_data</span></span>
<span id="cb3-3"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    (timestamp, sepal_length, sepal_width, petal_length, petal_width, target)</span></span>
<span id="cb3-4"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    VALUES (</span></span>
<span id="cb3-5"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        NOW(),</span></span>
<span id="cb3-6"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sepal_length<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-7"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sepal_width<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-8"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>petal_length<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-9"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>petal_width<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb3-10"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb3-11"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    );"""</span></span></code></pre></div>
<p>이 query 를 cursor 를 이용하여 DB 에 전달하는 코드 작성</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb4-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> pandas <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> pd</span>
<span id="cb4-2"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb4-3"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">from</span> sklearn.datasets <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> load_iris</span>
<span id="cb4-4"></span>
<span id="cb4-5"></span>
<span id="cb4-6"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> get_data():</span>
<span id="cb4-7">    X, y <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> load_iris(return_X_y<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>, as_frame<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>)</span>
<span id="cb4-8">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> pd.concat([X, y], axis<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"columns"</span>)</span>
<span id="cb4-9">    rename_rule <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> {</span>
<span id="cb4-10">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal length (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_length"</span>,</span>
<span id="cb4-11">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal width (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"sepal_width"</span>,</span>
<span id="cb4-12">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal length (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_length"</span>,</span>
<span id="cb4-13">        <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal width (cm)"</span>: <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"petal_width"</span>,</span>
<span id="cb4-14">    }</span>
<span id="cb4-15">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> df.rename(columns<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span>rename_rule)</span>
<span id="cb4-16">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">return</span> df</span>
<span id="cb4-17"></span>
<span id="cb4-18"></span>
<span id="cb4-19"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> insert_data(db_connect, data):</span>
<span id="cb4-20">    insert_row_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">f"""</span></span>
<span id="cb4-21"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">    INSERT INTO iris_data</span></span>
<span id="cb4-22"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        (timestamp, sepal_length, sepal_width, petal_length, petal_width, target)</span></span>
<span id="cb4-23"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        VALUES (</span></span>
<span id="cb4-24"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            NOW(),</span></span>
<span id="cb4-25"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sepal_length<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-26"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>sepal_width<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-27"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>petal_length<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-28"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>petal_width<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">,</span></span>
<span id="cb4-29"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">            </span><span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">{</span>data<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">.</span>target<span class="sc" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">}</span></span>
<span id="cb4-30"><span class="ss" style="color: #20794D;
background-color: null;
font-style: inherit;">        );"""</span></span>
<span id="cb4-31"></span>
<span id="cb4-32">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> db_connect.cursor() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cur:</span>
<span id="cb4-33">        cur.execute(insert_row_query)</span>
<span id="cb4-34">        db_connect.commit()</span>
<span id="cb4-35"></span>
<span id="cb4-36"></span>
<span id="cb4-37"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">if</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">__name__</span> <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">==</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"__main__"</span>:</span>
<span id="cb4-38">    db_connect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb4-39">        user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span>,</span>
<span id="cb4-40">        password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypassword"</span>,</span>
<span id="cb4-41">        host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>,</span>
<span id="cb4-42">        port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb4-43">        database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span>,</span>
<span id="cb4-44">    )</span>
<span id="cb4-45">    df <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> get_data()</span>
<span id="cb4-46">    insert_data(db_connect, df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze())</span></code></pre></div>
<p>-&gt; <code>psql</code> 로 현재는 iris_data 에서 하나의 데이터만 DB에 입력된 상태임을 확인할 수 있음</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-24-MLOps-day2/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">데이터 삽입</figcaption>
</figure>
</div>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-24-MLOps-day2/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">데이터 확인</figcaption>
</figure>
</div>
</section>
<section id="loop-추가" class="level3">
<h3 class="anchored" data-anchor-id="loop-추가">2. Loop 추가</h3>
<p><code>insert_data</code> 함수를 계속해서 반복하도록 하는 코드 작성</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> time</span>
<span id="cb5-2"></span>
<span id="cb5-3"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">def</span> generate_data(db_connect, df):</span>
<span id="cb5-4">    <span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">while</span> <span class="va" style="color: #111111;
background-color: null;
font-style: inherit;">True</span>:</span>
<span id="cb5-5">        insert_data(db_connect, df.sample(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>).squeeze())</span>
<span id="cb5-6">        time.sleep(<span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">1</span>)</span></code></pre></div>
<p>-&gt; <code>time</code> 패키지의 <code>sleep</code> 함수를 이용해서 DB의 부하 줄이기</p>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-24-MLOps-day2/index.html</guid>
  <pubDate>Thu, 23 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/100/200/150" medium="image"/>
</item>
<item>
  <title>MLOps for MLE - 1</title>
  <dc:creator>Ui Seok</dc:creator>
  <link>https://ui-seok.github.io/docs/blog/posts/2023-11-23-MLOps-day1/index.html</link>
  <description><![CDATA[ 



<section id="summary" class="level2">
<h2 class="anchored" data-anchor-id="summary">Summary</h2>
<ol type="1">
<li><p>Docker 설치 및 PostgreSQL DB 서버 생성</p></li>
<li><p>DB 의 role name 과 attribute 확인</p></li>
<li><p>생성된 DB 에 query 를 작성하여 테이블 생성</p></li>
</ol>
<div class="callout callout-style-default callout-note callout-titled">
<div class="callout-header d-flex align-content-center">
<div class="callout-icon-container">
<i class="callout-icon"></i>
</div>
<div class="callout-title-container flex-fill">
Note
</div>
</div>
<div class="callout-body-container callout-body">
<p>실습을 진행했던 코드를 보고싶으시다면 <a href="https://github.com/Ui-Seok/mlops-tutorial">여기</a>를 눌러주세요</p>
</div>
</div>
</section>
<section id="실습" class="level2">
<h2 class="anchored" data-anchor-id="실습">실습</h2>
<section id="db-서버-생성-및-확인" class="level3">
<h3 class="anchored" data-anchor-id="db-서버-생성-및-확인">1. DB 서버 생성 및 확인</h3>
<p><strong>Docker 설치 후 <code>docker run</code> 명령어를 사용하여 DB 서버 생성</strong></p>
<div class="sourceCode" id="cb1" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb1-1">$ docker run -d \</span>
<span id="cb1-2">  --name postgres-server \</span>
<span id="cb1-3">  -p 5432:5432 \</span>
<span id="cb1-4">  -e POSTGRES_USER=myuser \</span>
<span id="cb1-5">  -e POSTGRES_PASSWORD=mypassword \</span>
<span id="cb1-6">  -e POSTGRES_DB=mydatabase \</span>
<span id="cb1-7">  postgres:14.0</span></code></pre></div>
<ul>
<li><em>-d</em> : 컨테이너가 detached 모드로 실행</li>
<li><em>-p</em> : port forwarding 설정</li>
<li><em>-e</em> : 환경 변수 설정</li>
</ul>
<div class="quarto-figure quarto-figure-center">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-23-MLOps-day1/fig1.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">docker ps 로 현재 컨테이너 동작 확인</figcaption>
</figure>
</div>
<p><strong><code>psql</code> 을 통해 PostgreSQL DB 서버 접속</strong></p>
<p>-&gt; <code>psql</code>은 PostgreSQL DB 서버를 확인할때 사용하는 CLI 툴</p>
<div class="sourceCode" id="cb2" style="background: #f1f3f5;"><pre class="sourceCode markdown code-with-copy"><code class="sourceCode markdown"><span id="cb2-1">$ PGPASSWORD=mypassword psql -h localhost -p {port} -U myuser -d mydatabase</span></code></pre></div>
<ul>
<li><em>PGPASSWORD</em> : 접속할 유저의 비밀번호</li>
<li><em>h</em> : 호스트 지정</li>
<li><em>U</em> : 접속할 유저 이름 입력</li>
<li><em>d</em> : DB 이름 입력</li>
</ul>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-23-MLOps-day1/fig2.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">SQL 서버에 접속 한 모습과 <code>\du</code> 를 입력해 DB 의 role name 과 arrtributes 를 확인</figcaption>
</figure>
</div>
</section>
<section id="db-table-생성" class="level3">
<h3 class="anchored" data-anchor-id="db-table-생성">2. DB Table 생성</h3>
<p><strong><code>psycopg2</code> 를 이용하여 DB 접근</strong></p>
<p>-&gt; <code>connect</code> 함수 사용</p>
<div class="sourceCode" id="cb3" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb3-1"><span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">import</span> psycopg2</span>
<span id="cb3-2"></span>
<span id="cb3-3">db_connect <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> psycopg2.<span class="ex" style="color: null;
background-color: null;
font-style: inherit;">connect</span>(</span>
<span id="cb3-4">    user<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"myuser"</span>,</span>
<span id="cb3-5">    password<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mypassword"</span>,</span>
<span id="cb3-6">    host<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"localhost"</span>,</span>
<span id="cb3-7">    port<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="dv" style="color: #AD0000;
background-color: null;
font-style: inherit;">5432</span>,</span>
<span id="cb3-8">    database<span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"mydatabase"</span>,</span>
<span id="cb3-9">)</span></code></pre></div>
<p>-&gt; DB 를 생성할 때 입력한 정보 입력</p>
<p><strong>SQL Table Creation</strong></p>
<p>아래와 같은 형식으로 작성</p>
<div class="sourceCode" id="cb4" style="background: #f1f3f5;"><pre class="sourceCode sql code-with-copy"><code class="sourceCode sql"><span id="cb4-1"><span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">CREATE</span> <span class="kw" style="color: #003B4F;
background-color: null;
font-style: inherit;">TABLE</span> table_name (</span>
<span id="cb4-2">    column1 datatype,</span>
<span id="cb4-3">    column2 datatype,</span>
<span id="cb4-4">    column3 datatype,</span>
<span id="cb4-5">    <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">..</span>.</span>
<span id="cb4-6">);</span></code></pre></div>
<p>-&gt; 이 실습에서는 <code>scikit-learn</code> 패캐지의 <code>load_iris</code> 사용</p>
<div class="sourceCode" id="cb5" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb5-1">create_table_query <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> <span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">"""</span></span>
<span id="cb5-2"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">CREATE TABLE IF NOT EXISTS iris_data (</span></span>
<span id="cb5-3"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    id SERIAL PRIMARY KEY,</span></span>
<span id="cb5-4"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    timestamp timestamp,</span></span>
<span id="cb5-5"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sepal_length float8,</span></span>
<span id="cb5-6"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    sepal_width float8,</span></span>
<span id="cb5-7"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    petal_length float8,</span></span>
<span id="cb5-8"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    petal_width float8,</span></span>
<span id="cb5-9"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">    target int</span></span>
<span id="cb5-10"><span class="st" style="color: #20794D;
background-color: null;
font-style: inherit;">);"""</span></span></code></pre></div>
<p><strong>Send Query to DB</strong></p>
<ol type="1">
<li><p>Connector 에서 cursor 를 열고, cursor 에 query 전달</p>
<div class="sourceCode" id="cb6" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb6-1">cur <span class="op" style="color: #5E5E5E;
background-color: null;
font-style: inherit;">=</span> db_connect.cursor()</span>
<span id="cb6-2">cur.execute(create_table_query)</span></code></pre></div></li>
<li><p>전달된 query 를 실행하기 위해 connector에 <code>commit</code></p>
<div class="sourceCode" id="cb7" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb7-1">db_connect.commit()</span></code></pre></div></li>
<li><p>Cursor 의 사용이 끝나면 cursor를 <code>close</code></p>
<div class="sourceCode" id="cb8" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb8-1">cur.close()</span></code></pre></div></li>
</ol>
<p>하나의 프로세스로 만들게되면 다음과 같음</p>
<div class="sourceCode" id="cb9" style="background: #f1f3f5;"><pre class="sourceCode python code-with-copy"><code class="sourceCode python"><span id="cb9-1"><span class="cf" style="color: #003B4F;
background-color: null;
font-style: inherit;">with</span> db_connect.cursor() <span class="im" style="color: #00769E;
background-color: null;
font-style: inherit;">as</span> cur:</span>
<span id="cb9-2">    cur.execute(create_table_query)</span>
<span id="cb9-3">    db_connect.commit()</span></code></pre></div>
<p><strong>테이블 확인</strong></p>
<p><code>psql</code> 을 이용하여 DB에 접속하고 <code>\d</code> 를 입력하여 생성된 테이블들의 목록을 확인</p>
<p><code>select * from iris_data;</code> 를 입력하면 <code>iris_data</code> 테이블에 있는 데이터를 확인 할 수 있음</p>
<div class="quarto-figure quarto-figure-left">
<figure class="figure">
<p><img src="https://ui-seok.github.io/docs/blog/posts/2023-11-23-MLOps-day1/fig3.png" class="img-fluid figure-img"></p>
<figcaption class="figure-caption">테이블 확인</figcaption>
</figure>
</div>
</section>
</section>
<section id="reference" class="level2">
<h2 class="anchored" data-anchor-id="reference">Reference</h2>
<p><a href="https://mlops-for-mle.github.io/tutorial/">ML Engineer를 위한 MLOps tutorial</a></p>


</section>

 ]]></description>
  <category>mlops</category>
  <guid>https://ui-seok.github.io/docs/blog/posts/2023-11-23-MLOps-day1/index.html</guid>
  <pubDate>Wed, 22 Nov 2023 15:00:00 GMT</pubDate>
  <media:content url="https://picsum.photos/id/99/200/150" medium="image"/>
</item>
</channel>
</rss>
