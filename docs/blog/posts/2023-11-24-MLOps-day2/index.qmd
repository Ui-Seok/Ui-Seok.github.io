---
title: "MLOps for MLE - 2"
subtitle: DB에 데이터 삽입
author: "Ui Seok"
date: "2023-11-24"
categories: [mlops]

page-layout: article
---

## Summary

1. 생성한 테이블에 iris 데이터 삽입

2. 자동으로 삽입해주는 스크립트 작성

::: {.callout-note}
실습을 진행했던 코드를 보고싶으시다면 [여기](https://github.com/Ui-Seok/mlops-tutorial)를 눌러주세요
:::


## 실습

### 1. 데이터 삽입

__`scikit-learn` 패키지의 `load_iris`를 삽입하기 위해 앞에서 생성한 테이블의 columns 이름과 일치하도록 수정__

``` python
import pandas as pd
from sklearn.datasets import load_iris

def get_data():
    X, y = load_iris(return_X_y=True, as_frame=True)
    df = pd.concat([X, y], axis="columns")
    rename_rule = {
        "sepal length (cm)": "sepal_length",
        "sepal width (cm)": "sepal_width",
        "petal length (cm)": "petal_length",
        "petal width (cm)": "petal_width",
    }
    df = df.rename(columns=rename_rule)
    return df
```

__Data Insertion Query 작성__

DB에 데이터를 삽입하는 query의 포맷은 다음과 같음

``` sql
INSERT INTO {table_name} (col_1, col_2, ...) VALUES (val_1, val_2, ...)

```

이를 이해하고 query를 작성

``` python
insert_row_query = f"""
INSERT INTO iris_data
    (timestamp, sepal_length, sepal_width, petal_length, petal_width, target)
    VALUES (
        NOW(),
        {data.sepal_length},
        {data.sepal_width},
        {data.petal_length},
        {data.petal_width},
        {data.target}
    );"""

```

이 query를 cursor를 이용하여 DB에 전달하는 코드 작성

``` python
import pandas as pd
import psycopg2
from sklearn.datasets import load_iris


def get_data():
    X, y = load_iris(return_X_y=True, as_frame=True)
    df = pd.concat([X, y], axis="columns")
    rename_rule = {
        "sepal length (cm)": "sepal_length",
        "sepal width (cm)": "sepal_width",
        "petal length (cm)": "petal_length",
        "petal width (cm)": "petal_width",
    }
    df = df.rename(columns=rename_rule)
    return df


def insert_data(db_connect, data):
    insert_row_query = f"""
    INSERT INTO iris_data
        (timestamp, sepal_length, sepal_width, petal_length, petal_width, target)
        VALUES (
            NOW(),
            {data.sepal_length},
            {data.sepal_width},
            {data.petal_length},
            {data.petal_width},
            {data.target}
        );"""

    with db_connect.cursor() as cur:
        cur.execute(insert_row_query)
        db_connect.commit()


if __name__ == "__main__":
    db_connect = psycopg2.connect(
        user="myuser",
        password="mypassword",
        host="localhost",
        port=5432,
        database="mydatabase",
    )
    df = get_data()
    insert_data(db_connect, df.sample(1).squeeze())

```

-> `psql`로 현재는 iris_data에서 하나의 데이터만 DB에 입력된 상태임을 확인할 수 있음


### 2. Loop 추가

`insert_data` 함수를 계속해서 반복하도록 하는 코드 작성

``` python
import time

def generate_data(db_connect, df):
    while True:
        insert_data(db_connect, df.sample(1).squeeze())
        time.sleep(1)

```

-> `time`패키지의 `sleep`함수를 이용해서 DB의 부하 줄이기


## Reference

[ML Engineer를 위한 MLOps tutorial](https://mlops-for-mle.github.io/tutorial/)