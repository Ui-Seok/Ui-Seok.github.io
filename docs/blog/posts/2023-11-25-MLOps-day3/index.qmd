---
title: "MLOps for MLE - 3"
subtitle: Docker를 활용하여 DB에 데이터 삽입
author: "Ui Seok"
date: "2023-11-26"
categories: [mlops]

page-layout: article
---

## Summary

1. 앞의 코드를 Docker에서 활용하기 위해 Dockerfile 작성

2. Docker 컨테이너 간의 네트워크를 연결하여 DB에 데이터 삽입

3. DB 컨테이너와 데이터 생성 컨테이너를 묶는 Docker Compose 파일 작성

::: {.callout-note}
실습을 진행했던 코드를 보고싶으시다면 [여기](https://github.com/Ui-Seok/mlops-tutorial)를 눌러주세요
:::


## 실습


### 1. Data Generator on Docker


__앞에서 만들었던 데이터 생성 코드(`data_generator.py`로 부를 예정)를 활용__

- 코드 실행 순서

    1. DB에 연결하는 connector 생성

    2. 연결된 DB에 `iris_data` 테이블 생성

    3. Iris 데이터 불러오기

    4. 불러온 데이터 중 랜덤으로 row 1개를 DB에 삽입

    5. 4번을 계속해서 반복


__Dockerfile 작성__

``` dockerfile
FROM amd64/python:3.9-slim

RUN apt-get update && apt-get install -y \ 
    postgresql-client \ 
    && rm -rf /var/lib/apt/lists/*

WORKDIR /usr/app

RUN pip install -U pip &&\ 
    pip install scikit-learn pandas psycopg2-binary

COPY data_generator.py data_generator.py

ENTRYPOINT ["python", "data_generator.py", "--db-host"]

CMD ["localhost"]

```

- _from_ : 이미지를 만들 때 base가 되는 이미지 지정
- _RUN_ : 이미지를 만들 때 실행할 코드를 지정, 첫 번째 `RUN`에서는 해당 Dockerfile을 이용하여 컨테이너에 접근하여 `psql`을 사용하기 위해 `postgresql-client`을 설치
- _WORKDIR_ : 작업 directory 지정
- _RUN_ : 두 번째 `RUN`에서는 컨테이너에서 python 스크립트를 실행할 때 필요한 패키지 설치
- _COPY_ : `WORKDIR`로 지정한 directory를 기준으로 파일이나 폴더를 이미지에 복사 
- _ENTRYPOINT_ : 컨테이너가 실행될 때 시작할 프로세스를 입력
- _CMD_ : 컨테이너가 실행될 때 `ENTRYPOINT`에 전달할 argument를 입력


__Docker build__

``` markdown
$ docker build [OPTIONS] PATH | URL | -

```

-> 이 명령어를 통해 dockerfile을 기준으로 이미지를 생성


``` markdown
$ docker run [docker image name]

```

-> build한 이미지 실행

하지만 port 및 TCP/IP 관련 에러가 뜨는데 이는 local과 DB container는 연결되어 있지만 `Data Generator`과 DB Container가 연결되어 있지 않음

이를 해결하기 위해 컨테이너 간 통신할 수 있도록 네트워크를 생성해야 함


### 2. 네트워크 연결

__`docker network` 사용__

네트워크 정의 및 생성

``` markdown
$ docker network create [network-name]

```

실행 중인 DB 컨테이너를 생성된 네트워크에 연결

``` markdown
$ docker network connect [network-name] [DB container name]

```

- EX)

    ``` markdown
    $ docker network connect my-network postgres-server

    ```

__docker 재 실행__

``` markdown
$ docker run -d \
    --name [docker image name] \ 
    --network ["network-name"] \ 

```

- EX)

    ``` markdown
    $ docker run -d \ 
        --name data-generator \ 
        --network "my-network" \ 
        data-generator "postgres-server"

    ```

-> `psql`을 이용하여 DB에 접속해서 확인해보면 추가되는 것을 확인할 수 있음


### 3. Docker Compose

__Compose 파일의 아키텍처__

``` markdown
version: "3"

services:
    postgres-server:
        ...

    data-generator:
        ...

```

- _version_ : Compose 파일의 버전
- _services_ : Compose에 묶일 서비스들을 의미


__Postgres server service__

``` markdown
version: "3"

services:
    postgres-server:
        image: postgres:14.0
        container_name: postgres-server
        ports:
            - 5432:5432
        environment:
            POSTGRES_USER: myuser
            POSTGRES_PASSWORD: mypassword
            POSTGRES_DB: mydatabase

```

- _postgres-server_ : 서비스의 이름, 실행되는 컨테이너 호스트의 이름
- _ports_ : 컨테이너에서 외부로 노출할 포트 포워딩을 설정, `host:container` 형식으로 사용되고 여러 개 지정 가능
- _environment_ : 컨테이너를 실행할 때 사용한 `-e`옵션과 같은 역할


__Data generator service__

``` markdown
version: "3"

services:
    data-generator:
        build:
            context: .
            dockerfile: Dockerfile
        container_name: data-generator
        depends_on:
            - postgres_server
        command: ["postgres-server"]

```

- _build_ : 
    - _context_ : 이미지를 build하기 위해 dockerfile이 있는 절대경로 및 상대경로 설정
    - _dockerfile_ : _context_ 에서 설정한 경로에 있는 dockerfile의 파일명 입력
- _depends_on_ : Compose로 띄워지는 서비스 간의 종속성 순서대로 서비스를 시작할 때 사용
- _command_ : Dockerfile에 작성되어 있는 `CMD`를 덮어씀


위에서 작성한 코드를 하나의 파일로 합쳐 만들고 실행

``` markdown
$ docker compose up -d

```

- _-d_ : Detached 모드(백그라운드에서 컨테이를 실행 후 유지)로 실행

하지만 `docker ps`를 입력해보면 postgres server만 띄워져있음

`depends on` 으로 서비스 간의 종속성은 정해졌지만, 실제로 postgres-servre가 띄워진 뒤에 곧바로 data-generator가 띄워짐

postgres-server의 준비가 되지 않은 상태로 data-generator가 DB와 연결을 하려다 보니 Exited 문제가 발생

-> 이를 해결하기 위해 `healthcheck`와 `condition`을 추가


__`healthcheck`와 `condition`추가하기__

``` markdown
### postgres-server에 추가
healthcheck:
    test: ["CMD", "pg_isready", "-q", "-U", "myuser", "-d", "mydatabase"]
    interval: 10s
    timeout: 5s
    retries: 5

### data-generator에 추가
depends_on: 
    postgres-server:
        condition: service_healthy

```

- _test_ : 테스트 할 명령어 입력
- _interval_ : Healthcheck의 간격 설정
- _timeout_ : Healthcheck의 timeout을 설정
- _retries_ : Timeout의 횟수 설정
- _condition_ : Healthcheck 기능을 사용하기 위해 _depends_on_ 의 parameter로 `condition: service_healthy`를 넣어줌

이후 서비스를 다시 실행하면 문제 없이 실행이 가능


## Reference

[ML Engineer를 위한 MLOps tutorial](https://mlops-for-mle.github.io/tutorial/)