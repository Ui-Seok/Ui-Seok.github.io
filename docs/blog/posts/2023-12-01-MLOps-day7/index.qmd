---
title: "MLOps for MLE - 7"
description: MLflow 서버에 학습된 모델 저장
author: "Ui Seok"
date: "2023-12-01"
categories: [mlops]
image: "https://picsum.photos/id/107/200/150"

page-layout: article
---

## Summary

1. 모델을 학습하고 MLflow 서버에 저장

::: {.callout-note}
실습을 진행했던 코드를 보고싶으시다면 [여기](https://github.com/Ui-Seok/mlops-tutorial)를 눌러주세요
:::


## 실습

### 1. Save Model to Registry

`day 5` 에서 작성한 `db_train.py` 코드의 `#3. save_model` 부분을 변경하여 모델을 업로드하는 코드 작성


#### 1.1 환경 변수 추가

MLflow 와 통신하기 위해서는 몇 가지 환경 변수가 설정되어야 함

유저가 학습한 모델을 MLflow 서버를 통해 Arifact Store 인 MinIO 에 저장함

이 과정에서 MinIO 의 접근 권한이 필요함

이 접근 권한 정보는 `day 6` 에서 Docker Compose 파일의 `mlflow-server` 와 `mlflow-artifact-store` 의 정보임

따라서 아이디와 비밀번호를 사전에 정의된 시스템 환경 변수에 설정해야 MinIO 에 접근할 수 있음

추가로 MLflow 서버와 S3(MinIO) 의 URI 도 함께 설정해야함

``` python
import os

os.environ["MLFLOW_S3_ENDPOINT_URL"] = "http://localhost:9000"
os.environ["MLFLOW_TRACKING_URI"] = "http://localhost:5001"
os.environ["AWS_ACCESS_KEY_ID"] = "minio"
os.environ["AWS_SECRET_ACCESS_KEY"] = "miniostorage"

```

- _MLFLOW_S3_ENDPOINT_URL_ : 모델을 저장할 스토리지 주소
- _MLFLOW_TRACKING_URI_ : 정보를 저장하기 위해 연결할 MLflow 서버의 수조
- _AWS_ACCESS_KEY_ID_ : MinIO 에 접근하기 위한 아이디
- _AWS_SECRET_ACCESS_KEY_ : MinIO 에 접근하기 위한 비밀번호


#### 1.2 모델 저장하기

MLflow 의 정보를 저장하기 위해 `experiment` 와 `run` 을 사용함

- `experiment` : MLflow 에서 정보를 관리하기 위해 나누는 일종의 directory, 생성하지 않는 경우 `Default`로 저장됨
- `run` : `experiment` 에 저장되는 모델 실험 결과, 해당 `run` 에 실제 정보들이 저장되며 `experiment/run` 의 구조로 저장됨

`mlflow` 클래스를 이용하여 다음과 같이 코드를 작성함

`parser` 를 활용하여 `model_name` 인자를 받아주고 `experiment` 는 `mlflow.set_experiment("new-exp")` 를 이용하여 이름을 정해줌

`run` 을 담당하는 코드는 다음과 같음

``` python
with mlflow.start_run():
    mlflow.log_metrics({"train_acc": train_acc, "valid_acc": valid_acc})
    mlflow.sklearn.log_model(
        sk_model=model_pipeline,
        artifact_path=args.model_name,
        signature=signature,
        input_example=input_sample,
    )

```
- _mlflow.log_metrics_ : 모델의 결과 metrics 를 Python 의 dictionary 형태로 입력해 생성된 `run` 을 저장
- _mlflow.sklearn.log_model_ : `sklearn` 모델은 `mlflow.sklearn` 를 사용해 간편하게 업로드가 가능함

모델은 다음과 같은 구조로 저장됨

``` python
# Directory written by mlflow.sklearn.save_model(model, "sk_model")

sk_model/
├── MLmodel
├── model.pkl
├── conda.yaml
├── python_env.yaml
└── requirements.txt

```

### 2. 전체 코드

``` Python
# save_model_to_registry.py
import os
from argparse import ArgumentParser

import mlflow
import pandas as pd
import psycopg2
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import StandardScaler
from sklearn.svm import SVC

# 0. set mlflow environments
os.environ["MLFLOW_S3_ENDPOINT_URL"] = "http://localhost:9000"
os.environ["MLFLOW_TRACKING_URI"] = "http://localhost:5001"
os.environ["AWS_ACCESS_KEY_ID"] = "minio"
os.environ["AWS_SECRET_ACCESS_KEY"] = "miniostorage"

# 1. get data
db_connect = psycopg2.connect(
    user="myuser",
    password="mypassword",
    host="localhost",
    port=5432,
    database="mydatabase",
)
df = pd.read_sql("SELECT * FROM iris_data ORDER BY id DESC LIMIT 100", db_connect)

X = df.drop(["id", "timestamp", "target"], axis="columns")
y = df["target"]
X_train, X_valid, y_train, y_valid = train_test_split(X, y, train_size=0.8, random_state=2022)

# 2. model development and train
model_pipeline = Pipeline([("scaler", StandardScaler()), ("svc", SVC())])
model_pipeline.fit(X_train, y_train)

train_pred = model_pipeline.predict(X_train)
valid_pred = model_pipeline.predict(X_valid)

train_acc = accuracy_score(y_true=y_train, y_pred=train_pred)
valid_acc = accuracy_score(y_true=y_valid, y_pred=valid_pred)

print("Train Accuracy :", train_acc)
print("Valid Accuracy :", valid_acc)

# 3. save model
parser = ArgumentParser()
parser.add_argument("--model-name", dest="model_name", type=str, default="sk_model")
args = parser.parse_args()

mlflow.set_experiment("new-exp")

signature = mlflow.models.signature.infer_signature(model_input=X_train, model_output=train_pred)
input_sample = X_train.iloc[:10]

with mlflow.start_run():
    mlflow.log_metrics({"train_acc": train_acc, "valid_acc": valid_acc})
    mlflow.sklearn.log_model(
        sk_model=model_pipeline,
        artifact_path=args.model_name,
        signature=signature,
        input_example=input_sample,
    )

# 4. save data
df.to_csv("data.csv", index=False)

```

실행코드 : `python save_model_to_registry.py --model-name "sk_model"`

실행 결과는 다음과 같음

![모델 저장 결과 상세](fig1.png)


## Reference

[ML Engineer를 위한 MLOps tutorial](https://mlops-for-mle.github.io/tutorial/)